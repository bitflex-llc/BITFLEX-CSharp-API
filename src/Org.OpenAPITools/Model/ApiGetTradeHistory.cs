/*
 * BITFLEX Public API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ApiGetTradeHistory
    /// </summary>
    [DataContract(Name = "ApiGetTradeHistory")]
    public partial class ApiGetTradeHistory : IEquatable<ApiGetTradeHistory>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets TradeType
        /// </summary>
        [DataMember(Name = "tradeType", EmitDefaultValue = false)]
        public TradeType? TradeType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiGetTradeHistory" /> class.
        /// </summary>
        /// <param name="tradeType">tradeType.</param>
        /// <param name="pair">pair.</param>
        /// <param name="dateCreated">dateCreated.</param>
        /// <param name="dateClosed">dateClosed.</param>
        /// <param name="amount">amount.</param>
        /// <param name="price">price.</param>
        public ApiGetTradeHistory(TradeType? tradeType = default(TradeType?), string pair = default(string), long dateCreated = default(long), long dateClosed = default(long), double amount = default(double), double price = default(double))
        {
            this.TradeType = tradeType;
            this.Pair = pair;
            this.DateCreated = dateCreated;
            this.DateClosed = dateClosed;
            this.Amount = amount;
            this.Price = price;
        }

        /// <summary>
        /// Gets or Sets Pair
        /// </summary>
        [DataMember(Name = "pair", EmitDefaultValue = true)]
        public string Pair { get; set; }

        /// <summary>
        /// Gets or Sets DateCreated
        /// </summary>
        [DataMember(Name = "dateCreated", EmitDefaultValue = false)]
        public long DateCreated { get; set; }

        /// <summary>
        /// Gets or Sets DateClosed
        /// </summary>
        [DataMember(Name = "dateClosed", EmitDefaultValue = false)]
        public long DateClosed { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public double Amount { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public double Price { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiGetTradeHistory {\n");
            sb.Append("  TradeType: ").Append(TradeType).Append("\n");
            sb.Append("  Pair: ").Append(Pair).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DateClosed: ").Append(DateClosed).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiGetTradeHistory);
        }

        /// <summary>
        /// Returns true if ApiGetTradeHistory instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiGetTradeHistory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiGetTradeHistory input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TradeType == input.TradeType ||
                    this.TradeType.Equals(input.TradeType)
                ) && 
                (
                    this.Pair == input.Pair ||
                    (this.Pair != null &&
                    this.Pair.Equals(input.Pair))
                ) && 
                (
                    this.DateCreated == input.DateCreated ||
                    this.DateCreated.Equals(input.DateCreated)
                ) && 
                (
                    this.DateClosed == input.DateClosed ||
                    this.DateClosed.Equals(input.DateClosed)
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.Price == input.Price ||
                    this.Price.Equals(input.Price)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.TradeType.GetHashCode();
                if (this.Pair != null)
                    hashCode = hashCode * 59 + this.Pair.GetHashCode();
                hashCode = hashCode * 59 + this.DateCreated.GetHashCode();
                hashCode = hashCode * 59 + this.DateClosed.GetHashCode();
                hashCode = hashCode * 59 + this.Amount.GetHashCode();
                hashCode = hashCode * 59 + this.Price.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
