/*
 * BITFLEX Public API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SetPushTokenRequest
    /// </summary>
    [DataContract(Name = "SetPushTokenRequest")]
    public partial class SetPushTokenRequest : IEquatable<SetPushTokenRequest>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Device
        /// </summary>
        [DataMember(Name = "device", EmitDefaultValue = false)]
        public DeviceType? Device { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SetPushTokenRequest" /> class.
        /// </summary>
        /// <param name="pushToken">pushToken.</param>
        /// <param name="description">description.</param>
        /// <param name="device">device.</param>
        /// <param name="bitflexDeviceId">bitflexDeviceId.</param>
        /// <param name="publicKey">publicKey.</param>
        public SetPushTokenRequest(string pushToken = default(string), string description = default(string), DeviceType? device = default(DeviceType?), string bitflexDeviceId = default(string), string publicKey = default(string))
        {
            this.PushToken = pushToken;
            this.Description = description;
            this.Device = device;
            this.BitflexDeviceId = bitflexDeviceId;
            this.PublicKey = publicKey;
        }

        /// <summary>
        /// Gets or Sets PushToken
        /// </summary>
        [DataMember(Name = "pushToken", EmitDefaultValue = true)]
        public string PushToken { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets BitflexDeviceId
        /// </summary>
        [DataMember(Name = "bitflexDeviceId", EmitDefaultValue = true)]
        public string BitflexDeviceId { get; set; }

        /// <summary>
        /// Gets or Sets PublicKey
        /// </summary>
        [DataMember(Name = "publicKey", EmitDefaultValue = true)]
        public string PublicKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SetPushTokenRequest {\n");
            sb.Append("  PushToken: ").Append(PushToken).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Device: ").Append(Device).Append("\n");
            sb.Append("  BitflexDeviceId: ").Append(BitflexDeviceId).Append("\n");
            sb.Append("  PublicKey: ").Append(PublicKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SetPushTokenRequest);
        }

        /// <summary>
        /// Returns true if SetPushTokenRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SetPushTokenRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SetPushTokenRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PushToken == input.PushToken ||
                    (this.PushToken != null &&
                    this.PushToken.Equals(input.PushToken))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Device == input.Device ||
                    this.Device.Equals(input.Device)
                ) && 
                (
                    this.BitflexDeviceId == input.BitflexDeviceId ||
                    (this.BitflexDeviceId != null &&
                    this.BitflexDeviceId.Equals(input.BitflexDeviceId))
                ) && 
                (
                    this.PublicKey == input.PublicKey ||
                    (this.PublicKey != null &&
                    this.PublicKey.Equals(input.PublicKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PushToken != null)
                    hashCode = hashCode * 59 + this.PushToken.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                hashCode = hashCode * 59 + this.Device.GetHashCode();
                if (this.BitflexDeviceId != null)
                    hashCode = hashCode * 59 + this.BitflexDeviceId.GetHashCode();
                if (this.PublicKey != null)
                    hashCode = hashCode * 59 + this.PublicKey.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
