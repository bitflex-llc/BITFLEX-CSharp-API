/*
 * BITFLEX Public API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ApplicationDbContext
    /// </summary>
    [DataContract(Name = "ApplicationDbContext")]
    public partial class ApplicationDbContext : IEquatable<ApplicationDbContext>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationDbContext" /> class.
        /// </summary>
        /// <param name="database">database.</param>
        /// <param name="changeTracker">changeTracker.</param>
        /// <param name="model">model.</param>
        /// <param name="contextId">contextId.</param>
        /// <param name="users">users.</param>
        /// <param name="userClaims">userClaims.</param>
        /// <param name="userLogins">userLogins.</param>
        /// <param name="userTokens">userTokens.</param>
        /// <param name="userRoles">userRoles.</param>
        /// <param name="roles">roles.</param>
        /// <param name="roleClaims">roleClaims.</param>
        /// <param name="cryptoCurrencies">cryptoCurrencies.</param>
        /// <param name="orders">orders.</param>
        /// <param name="depositAddresses">depositAddresses.</param>
        /// <param name="userBalances">userBalances.</param>
        /// <param name="markets">markets.</param>
        /// <param name="tradingPairs">tradingPairs.</param>
        /// <param name="transactions">transactions.</param>
        /// <param name="withdrawRequests">withdrawRequests.</param>
        /// <param name="manualWithdrawRequests">manualWithdrawRequests.</param>
        /// <param name="trades">trades.</param>
        /// <param name="quotes">quotes.</param>
        /// <param name="smsVerificationMessages">smsVerificationMessages.</param>
        /// <param name="tradingAmounts">tradingAmounts.</param>
        /// <param name="rippleDestinationTags">rippleDestinationTags.</param>
        /// <param name="bitcoinBasedCurrencies">bitcoinBasedCurrencies.</param>
        /// <param name="erC20Tokens">erC20Tokens.</param>
        /// <param name="balanceActions">balanceActions.</param>
        /// <param name="keysValues">keysValues.</param>
        /// <param name="applicationTokenAccesses">applicationTokenAccesses.</param>
        /// <param name="applicationQrCommands">applicationQrCommands.</param>
        /// <param name="pushTokens">pushTokens.</param>
        /// <param name="healthChecks">healthChecks.</param>
        public ApplicationDbContext(DatabaseFacade database = default(DatabaseFacade), ChangeTracker changeTracker = default(ChangeTracker), Object model = default(Object), DbContextId contextId = default(DbContextId), List<ApplicationUser> users = default(List<ApplicationUser>), List<StringIdentityUserClaim> userClaims = default(List<StringIdentityUserClaim>), List<StringIdentityUserLogin> userLogins = default(List<StringIdentityUserLogin>), List<StringIdentityUserToken> userTokens = default(List<StringIdentityUserToken>), List<StringIdentityUserRole> userRoles = default(List<StringIdentityUserRole>), List<IdentityRole> roles = default(List<IdentityRole>), List<StringIdentityRoleClaim> roleClaims = default(List<StringIdentityRoleClaim>), List<CryptoCurrency> cryptoCurrencies = default(List<CryptoCurrency>), List<Order> orders = default(List<Order>), List<DepositAddress> depositAddresses = default(List<DepositAddress>), List<Balance> userBalances = default(List<Balance>), List<Market> markets = default(List<Market>), List<TradingPair> tradingPairs = default(List<TradingPair>), List<Transaction> transactions = default(List<Transaction>), List<WithdrawRequest> withdrawRequests = default(List<WithdrawRequest>), List<ManualWithdrawRequest> manualWithdrawRequests = default(List<ManualWithdrawRequest>), List<Trade> trades = default(List<Trade>), List<Quote> quotes = default(List<Quote>), List<SmsVerificationMessage> smsVerificationMessages = default(List<SmsVerificationMessage>), List<TradingAmount> tradingAmounts = default(List<TradingAmount>), List<RippleDestinationTag> rippleDestinationTags = default(List<RippleDestinationTag>), List<BitcoinBasedCurrency> bitcoinBasedCurrencies = default(List<BitcoinBasedCurrency>), List<ERC20Token> erC20Tokens = default(List<ERC20Token>), List<BalanceAction> balanceActions = default(List<BalanceAction>), List<KeyValue> keysValues = default(List<KeyValue>), List<IApplicationTokenAccess> applicationTokenAccesses = default(List<IApplicationTokenAccess>), List<IApplicationQrCommand> applicationQrCommands = default(List<IApplicationQrCommand>), List<PushToken> pushTokens = default(List<PushToken>), List<HealthCheck> healthChecks = default(List<HealthCheck>))
        {
            this.Database = database;
            this.ChangeTracker = changeTracker;
            this.Model = model;
            this.ContextId = contextId;
            this.Users = users;
            this.UserClaims = userClaims;
            this.UserLogins = userLogins;
            this.UserTokens = userTokens;
            this.UserRoles = userRoles;
            this.Roles = roles;
            this.RoleClaims = roleClaims;
            this.CryptoCurrencies = cryptoCurrencies;
            this.Orders = orders;
            this.DepositAddresses = depositAddresses;
            this.UserBalances = userBalances;
            this.Markets = markets;
            this.TradingPairs = tradingPairs;
            this.Transactions = transactions;
            this.WithdrawRequests = withdrawRequests;
            this.ManualWithdrawRequests = manualWithdrawRequests;
            this.Trades = trades;
            this.Quotes = quotes;
            this.SmsVerificationMessages = smsVerificationMessages;
            this.TradingAmounts = tradingAmounts;
            this.RippleDestinationTags = rippleDestinationTags;
            this.BitcoinBasedCurrencies = bitcoinBasedCurrencies;
            this.ErC20Tokens = erC20Tokens;
            this.BalanceActions = balanceActions;
            this.KeysValues = keysValues;
            this.ApplicationTokenAccesses = applicationTokenAccesses;
            this.ApplicationQrCommands = applicationQrCommands;
            this.PushTokens = pushTokens;
            this.HealthChecks = healthChecks;
        }

        /// <summary>
        /// Gets or Sets Database
        /// </summary>
        [DataMember(Name = "database", EmitDefaultValue = false)]
        public DatabaseFacade Database { get; set; }

        /// <summary>
        /// Gets or Sets ChangeTracker
        /// </summary>
        [DataMember(Name = "changeTracker", EmitDefaultValue = false)]
        public ChangeTracker ChangeTracker { get; set; }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [DataMember(Name = "model", EmitDefaultValue = false)]
        public Object Model { get; set; }

        /// <summary>
        /// Gets or Sets ContextId
        /// </summary>
        [DataMember(Name = "contextId", EmitDefaultValue = false)]
        public DbContextId ContextId { get; set; }

        /// <summary>
        /// Gets or Sets Users
        /// </summary>
        [DataMember(Name = "users", EmitDefaultValue = true)]
        public List<ApplicationUser> Users { get; set; }

        /// <summary>
        /// Gets or Sets UserClaims
        /// </summary>
        [DataMember(Name = "userClaims", EmitDefaultValue = true)]
        public List<StringIdentityUserClaim> UserClaims { get; set; }

        /// <summary>
        /// Gets or Sets UserLogins
        /// </summary>
        [DataMember(Name = "userLogins", EmitDefaultValue = true)]
        public List<StringIdentityUserLogin> UserLogins { get; set; }

        /// <summary>
        /// Gets or Sets UserTokens
        /// </summary>
        [DataMember(Name = "userTokens", EmitDefaultValue = true)]
        public List<StringIdentityUserToken> UserTokens { get; set; }

        /// <summary>
        /// Gets or Sets UserRoles
        /// </summary>
        [DataMember(Name = "userRoles", EmitDefaultValue = true)]
        public List<StringIdentityUserRole> UserRoles { get; set; }

        /// <summary>
        /// Gets or Sets Roles
        /// </summary>
        [DataMember(Name = "roles", EmitDefaultValue = true)]
        public List<IdentityRole> Roles { get; set; }

        /// <summary>
        /// Gets or Sets RoleClaims
        /// </summary>
        [DataMember(Name = "roleClaims", EmitDefaultValue = true)]
        public List<StringIdentityRoleClaim> RoleClaims { get; set; }

        /// <summary>
        /// Gets or Sets CryptoCurrencies
        /// </summary>
        [DataMember(Name = "cryptoCurrencies", EmitDefaultValue = true)]
        public List<CryptoCurrency> CryptoCurrencies { get; set; }

        /// <summary>
        /// Gets or Sets Orders
        /// </summary>
        [DataMember(Name = "orders", EmitDefaultValue = true)]
        public List<Order> Orders { get; set; }

        /// <summary>
        /// Gets or Sets DepositAddresses
        /// </summary>
        [DataMember(Name = "depositAddresses", EmitDefaultValue = true)]
        public List<DepositAddress> DepositAddresses { get; set; }

        /// <summary>
        /// Gets or Sets UserBalances
        /// </summary>
        [DataMember(Name = "userBalances", EmitDefaultValue = true)]
        public List<Balance> UserBalances { get; set; }

        /// <summary>
        /// Gets or Sets Markets
        /// </summary>
        [DataMember(Name = "markets", EmitDefaultValue = true)]
        public List<Market> Markets { get; set; }

        /// <summary>
        /// Gets or Sets TradingPairs
        /// </summary>
        [DataMember(Name = "tradingPairs", EmitDefaultValue = true)]
        public List<TradingPair> TradingPairs { get; set; }

        /// <summary>
        /// Gets or Sets Transactions
        /// </summary>
        [DataMember(Name = "transactions", EmitDefaultValue = true)]
        public List<Transaction> Transactions { get; set; }

        /// <summary>
        /// Gets or Sets WithdrawRequests
        /// </summary>
        [DataMember(Name = "withdrawRequests", EmitDefaultValue = true)]
        public List<WithdrawRequest> WithdrawRequests { get; set; }

        /// <summary>
        /// Gets or Sets ManualWithdrawRequests
        /// </summary>
        [DataMember(Name = "manualWithdrawRequests", EmitDefaultValue = true)]
        public List<ManualWithdrawRequest> ManualWithdrawRequests { get; set; }

        /// <summary>
        /// Gets or Sets Trades
        /// </summary>
        [DataMember(Name = "trades", EmitDefaultValue = true)]
        public List<Trade> Trades { get; set; }

        /// <summary>
        /// Gets or Sets Quotes
        /// </summary>
        [DataMember(Name = "quotes", EmitDefaultValue = true)]
        public List<Quote> Quotes { get; set; }

        /// <summary>
        /// Gets or Sets SmsVerificationMessages
        /// </summary>
        [DataMember(Name = "smsVerificationMessages", EmitDefaultValue = true)]
        public List<SmsVerificationMessage> SmsVerificationMessages { get; set; }

        /// <summary>
        /// Gets or Sets TradingAmounts
        /// </summary>
        [DataMember(Name = "tradingAmounts", EmitDefaultValue = true)]
        public List<TradingAmount> TradingAmounts { get; set; }

        /// <summary>
        /// Gets or Sets RippleDestinationTags
        /// </summary>
        [DataMember(Name = "rippleDestinationTags", EmitDefaultValue = true)]
        public List<RippleDestinationTag> RippleDestinationTags { get; set; }

        /// <summary>
        /// Gets or Sets BitcoinBasedCurrencies
        /// </summary>
        [DataMember(Name = "bitcoinBasedCurrencies", EmitDefaultValue = true)]
        public List<BitcoinBasedCurrency> BitcoinBasedCurrencies { get; set; }

        /// <summary>
        /// Gets or Sets ErC20Tokens
        /// </summary>
        [DataMember(Name = "erC20Tokens", EmitDefaultValue = true)]
        public List<ERC20Token> ErC20Tokens { get; set; }

        /// <summary>
        /// Gets or Sets BalanceActions
        /// </summary>
        [DataMember(Name = "balanceActions", EmitDefaultValue = true)]
        public List<BalanceAction> BalanceActions { get; set; }

        /// <summary>
        /// Gets or Sets KeysValues
        /// </summary>
        [DataMember(Name = "keysValues", EmitDefaultValue = true)]
        public List<KeyValue> KeysValues { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationTokenAccesses
        /// </summary>
        [DataMember(Name = "applicationTokenAccesses", EmitDefaultValue = true)]
        public List<IApplicationTokenAccess> ApplicationTokenAccesses { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationQrCommands
        /// </summary>
        [DataMember(Name = "applicationQrCommands", EmitDefaultValue = true)]
        public List<IApplicationQrCommand> ApplicationQrCommands { get; set; }

        /// <summary>
        /// Gets or Sets PushTokens
        /// </summary>
        [DataMember(Name = "pushTokens", EmitDefaultValue = true)]
        public List<PushToken> PushTokens { get; set; }

        /// <summary>
        /// Gets or Sets HealthChecks
        /// </summary>
        [DataMember(Name = "healthChecks", EmitDefaultValue = true)]
        public List<HealthCheck> HealthChecks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplicationDbContext {\n");
            sb.Append("  Database: ").Append(Database).Append("\n");
            sb.Append("  ChangeTracker: ").Append(ChangeTracker).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  ContextId: ").Append(ContextId).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("  UserClaims: ").Append(UserClaims).Append("\n");
            sb.Append("  UserLogins: ").Append(UserLogins).Append("\n");
            sb.Append("  UserTokens: ").Append(UserTokens).Append("\n");
            sb.Append("  UserRoles: ").Append(UserRoles).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("  RoleClaims: ").Append(RoleClaims).Append("\n");
            sb.Append("  CryptoCurrencies: ").Append(CryptoCurrencies).Append("\n");
            sb.Append("  Orders: ").Append(Orders).Append("\n");
            sb.Append("  DepositAddresses: ").Append(DepositAddresses).Append("\n");
            sb.Append("  UserBalances: ").Append(UserBalances).Append("\n");
            sb.Append("  Markets: ").Append(Markets).Append("\n");
            sb.Append("  TradingPairs: ").Append(TradingPairs).Append("\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("  WithdrawRequests: ").Append(WithdrawRequests).Append("\n");
            sb.Append("  ManualWithdrawRequests: ").Append(ManualWithdrawRequests).Append("\n");
            sb.Append("  Trades: ").Append(Trades).Append("\n");
            sb.Append("  Quotes: ").Append(Quotes).Append("\n");
            sb.Append("  SmsVerificationMessages: ").Append(SmsVerificationMessages).Append("\n");
            sb.Append("  TradingAmounts: ").Append(TradingAmounts).Append("\n");
            sb.Append("  RippleDestinationTags: ").Append(RippleDestinationTags).Append("\n");
            sb.Append("  BitcoinBasedCurrencies: ").Append(BitcoinBasedCurrencies).Append("\n");
            sb.Append("  ErC20Tokens: ").Append(ErC20Tokens).Append("\n");
            sb.Append("  BalanceActions: ").Append(BalanceActions).Append("\n");
            sb.Append("  KeysValues: ").Append(KeysValues).Append("\n");
            sb.Append("  ApplicationTokenAccesses: ").Append(ApplicationTokenAccesses).Append("\n");
            sb.Append("  ApplicationQrCommands: ").Append(ApplicationQrCommands).Append("\n");
            sb.Append("  PushTokens: ").Append(PushTokens).Append("\n");
            sb.Append("  HealthChecks: ").Append(HealthChecks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplicationDbContext);
        }

        /// <summary>
        /// Returns true if ApplicationDbContext instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplicationDbContext to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicationDbContext input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Database == input.Database ||
                    (this.Database != null &&
                    this.Database.Equals(input.Database))
                ) && 
                (
                    this.ChangeTracker == input.ChangeTracker ||
                    (this.ChangeTracker != null &&
                    this.ChangeTracker.Equals(input.ChangeTracker))
                ) && 
                (
                    this.Model == input.Model ||
                    (this.Model != null &&
                    this.Model.Equals(input.Model))
                ) && 
                (
                    this.ContextId == input.ContextId ||
                    (this.ContextId != null &&
                    this.ContextId.Equals(input.ContextId))
                ) && 
                (
                    this.Users == input.Users ||
                    this.Users != null &&
                    input.Users != null &&
                    this.Users.SequenceEqual(input.Users)
                ) && 
                (
                    this.UserClaims == input.UserClaims ||
                    this.UserClaims != null &&
                    input.UserClaims != null &&
                    this.UserClaims.SequenceEqual(input.UserClaims)
                ) && 
                (
                    this.UserLogins == input.UserLogins ||
                    this.UserLogins != null &&
                    input.UserLogins != null &&
                    this.UserLogins.SequenceEqual(input.UserLogins)
                ) && 
                (
                    this.UserTokens == input.UserTokens ||
                    this.UserTokens != null &&
                    input.UserTokens != null &&
                    this.UserTokens.SequenceEqual(input.UserTokens)
                ) && 
                (
                    this.UserRoles == input.UserRoles ||
                    this.UserRoles != null &&
                    input.UserRoles != null &&
                    this.UserRoles.SequenceEqual(input.UserRoles)
                ) && 
                (
                    this.Roles == input.Roles ||
                    this.Roles != null &&
                    input.Roles != null &&
                    this.Roles.SequenceEqual(input.Roles)
                ) && 
                (
                    this.RoleClaims == input.RoleClaims ||
                    this.RoleClaims != null &&
                    input.RoleClaims != null &&
                    this.RoleClaims.SequenceEqual(input.RoleClaims)
                ) && 
                (
                    this.CryptoCurrencies == input.CryptoCurrencies ||
                    this.CryptoCurrencies != null &&
                    input.CryptoCurrencies != null &&
                    this.CryptoCurrencies.SequenceEqual(input.CryptoCurrencies)
                ) && 
                (
                    this.Orders == input.Orders ||
                    this.Orders != null &&
                    input.Orders != null &&
                    this.Orders.SequenceEqual(input.Orders)
                ) && 
                (
                    this.DepositAddresses == input.DepositAddresses ||
                    this.DepositAddresses != null &&
                    input.DepositAddresses != null &&
                    this.DepositAddresses.SequenceEqual(input.DepositAddresses)
                ) && 
                (
                    this.UserBalances == input.UserBalances ||
                    this.UserBalances != null &&
                    input.UserBalances != null &&
                    this.UserBalances.SequenceEqual(input.UserBalances)
                ) && 
                (
                    this.Markets == input.Markets ||
                    this.Markets != null &&
                    input.Markets != null &&
                    this.Markets.SequenceEqual(input.Markets)
                ) && 
                (
                    this.TradingPairs == input.TradingPairs ||
                    this.TradingPairs != null &&
                    input.TradingPairs != null &&
                    this.TradingPairs.SequenceEqual(input.TradingPairs)
                ) && 
                (
                    this.Transactions == input.Transactions ||
                    this.Transactions != null &&
                    input.Transactions != null &&
                    this.Transactions.SequenceEqual(input.Transactions)
                ) && 
                (
                    this.WithdrawRequests == input.WithdrawRequests ||
                    this.WithdrawRequests != null &&
                    input.WithdrawRequests != null &&
                    this.WithdrawRequests.SequenceEqual(input.WithdrawRequests)
                ) && 
                (
                    this.ManualWithdrawRequests == input.ManualWithdrawRequests ||
                    this.ManualWithdrawRequests != null &&
                    input.ManualWithdrawRequests != null &&
                    this.ManualWithdrawRequests.SequenceEqual(input.ManualWithdrawRequests)
                ) && 
                (
                    this.Trades == input.Trades ||
                    this.Trades != null &&
                    input.Trades != null &&
                    this.Trades.SequenceEqual(input.Trades)
                ) && 
                (
                    this.Quotes == input.Quotes ||
                    this.Quotes != null &&
                    input.Quotes != null &&
                    this.Quotes.SequenceEqual(input.Quotes)
                ) && 
                (
                    this.SmsVerificationMessages == input.SmsVerificationMessages ||
                    this.SmsVerificationMessages != null &&
                    input.SmsVerificationMessages != null &&
                    this.SmsVerificationMessages.SequenceEqual(input.SmsVerificationMessages)
                ) && 
                (
                    this.TradingAmounts == input.TradingAmounts ||
                    this.TradingAmounts != null &&
                    input.TradingAmounts != null &&
                    this.TradingAmounts.SequenceEqual(input.TradingAmounts)
                ) && 
                (
                    this.RippleDestinationTags == input.RippleDestinationTags ||
                    this.RippleDestinationTags != null &&
                    input.RippleDestinationTags != null &&
                    this.RippleDestinationTags.SequenceEqual(input.RippleDestinationTags)
                ) && 
                (
                    this.BitcoinBasedCurrencies == input.BitcoinBasedCurrencies ||
                    this.BitcoinBasedCurrencies != null &&
                    input.BitcoinBasedCurrencies != null &&
                    this.BitcoinBasedCurrencies.SequenceEqual(input.BitcoinBasedCurrencies)
                ) && 
                (
                    this.ErC20Tokens == input.ErC20Tokens ||
                    this.ErC20Tokens != null &&
                    input.ErC20Tokens != null &&
                    this.ErC20Tokens.SequenceEqual(input.ErC20Tokens)
                ) && 
                (
                    this.BalanceActions == input.BalanceActions ||
                    this.BalanceActions != null &&
                    input.BalanceActions != null &&
                    this.BalanceActions.SequenceEqual(input.BalanceActions)
                ) && 
                (
                    this.KeysValues == input.KeysValues ||
                    this.KeysValues != null &&
                    input.KeysValues != null &&
                    this.KeysValues.SequenceEqual(input.KeysValues)
                ) && 
                (
                    this.ApplicationTokenAccesses == input.ApplicationTokenAccesses ||
                    this.ApplicationTokenAccesses != null &&
                    input.ApplicationTokenAccesses != null &&
                    this.ApplicationTokenAccesses.SequenceEqual(input.ApplicationTokenAccesses)
                ) && 
                (
                    this.ApplicationQrCommands == input.ApplicationQrCommands ||
                    this.ApplicationQrCommands != null &&
                    input.ApplicationQrCommands != null &&
                    this.ApplicationQrCommands.SequenceEqual(input.ApplicationQrCommands)
                ) && 
                (
                    this.PushTokens == input.PushTokens ||
                    this.PushTokens != null &&
                    input.PushTokens != null &&
                    this.PushTokens.SequenceEqual(input.PushTokens)
                ) && 
                (
                    this.HealthChecks == input.HealthChecks ||
                    this.HealthChecks != null &&
                    input.HealthChecks != null &&
                    this.HealthChecks.SequenceEqual(input.HealthChecks)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Database != null)
                    hashCode = hashCode * 59 + this.Database.GetHashCode();
                if (this.ChangeTracker != null)
                    hashCode = hashCode * 59 + this.ChangeTracker.GetHashCode();
                if (this.Model != null)
                    hashCode = hashCode * 59 + this.Model.GetHashCode();
                if (this.ContextId != null)
                    hashCode = hashCode * 59 + this.ContextId.GetHashCode();
                if (this.Users != null)
                    hashCode = hashCode * 59 + this.Users.GetHashCode();
                if (this.UserClaims != null)
                    hashCode = hashCode * 59 + this.UserClaims.GetHashCode();
                if (this.UserLogins != null)
                    hashCode = hashCode * 59 + this.UserLogins.GetHashCode();
                if (this.UserTokens != null)
                    hashCode = hashCode * 59 + this.UserTokens.GetHashCode();
                if (this.UserRoles != null)
                    hashCode = hashCode * 59 + this.UserRoles.GetHashCode();
                if (this.Roles != null)
                    hashCode = hashCode * 59 + this.Roles.GetHashCode();
                if (this.RoleClaims != null)
                    hashCode = hashCode * 59 + this.RoleClaims.GetHashCode();
                if (this.CryptoCurrencies != null)
                    hashCode = hashCode * 59 + this.CryptoCurrencies.GetHashCode();
                if (this.Orders != null)
                    hashCode = hashCode * 59 + this.Orders.GetHashCode();
                if (this.DepositAddresses != null)
                    hashCode = hashCode * 59 + this.DepositAddresses.GetHashCode();
                if (this.UserBalances != null)
                    hashCode = hashCode * 59 + this.UserBalances.GetHashCode();
                if (this.Markets != null)
                    hashCode = hashCode * 59 + this.Markets.GetHashCode();
                if (this.TradingPairs != null)
                    hashCode = hashCode * 59 + this.TradingPairs.GetHashCode();
                if (this.Transactions != null)
                    hashCode = hashCode * 59 + this.Transactions.GetHashCode();
                if (this.WithdrawRequests != null)
                    hashCode = hashCode * 59 + this.WithdrawRequests.GetHashCode();
                if (this.ManualWithdrawRequests != null)
                    hashCode = hashCode * 59 + this.ManualWithdrawRequests.GetHashCode();
                if (this.Trades != null)
                    hashCode = hashCode * 59 + this.Trades.GetHashCode();
                if (this.Quotes != null)
                    hashCode = hashCode * 59 + this.Quotes.GetHashCode();
                if (this.SmsVerificationMessages != null)
                    hashCode = hashCode * 59 + this.SmsVerificationMessages.GetHashCode();
                if (this.TradingAmounts != null)
                    hashCode = hashCode * 59 + this.TradingAmounts.GetHashCode();
                if (this.RippleDestinationTags != null)
                    hashCode = hashCode * 59 + this.RippleDestinationTags.GetHashCode();
                if (this.BitcoinBasedCurrencies != null)
                    hashCode = hashCode * 59 + this.BitcoinBasedCurrencies.GetHashCode();
                if (this.ErC20Tokens != null)
                    hashCode = hashCode * 59 + this.ErC20Tokens.GetHashCode();
                if (this.BalanceActions != null)
                    hashCode = hashCode * 59 + this.BalanceActions.GetHashCode();
                if (this.KeysValues != null)
                    hashCode = hashCode * 59 + this.KeysValues.GetHashCode();
                if (this.ApplicationTokenAccesses != null)
                    hashCode = hashCode * 59 + this.ApplicationTokenAccesses.GetHashCode();
                if (this.ApplicationQrCommands != null)
                    hashCode = hashCode * 59 + this.ApplicationQrCommands.GetHashCode();
                if (this.PushTokens != null)
                    hashCode = hashCode * 59 + this.PushTokens.GetHashCode();
                if (this.HealthChecks != null)
                    hashCode = hashCode * 59 + this.HealthChecks.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
