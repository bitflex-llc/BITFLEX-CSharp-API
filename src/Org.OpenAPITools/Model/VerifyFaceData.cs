/*
 * BITFLEX Public API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// VerifyFaceData
    /// </summary>
    [DataContract(Name = "VerifyFaceData")]
    public partial class VerifyFaceData : IEquatable<VerifyFaceData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VerifyFaceData" /> class.
        /// </summary>
        /// <param name="faceId1">faceId1.</param>
        /// <param name="faceId2">faceId2.</param>
        public VerifyFaceData(string faceId1 = default(string), string faceId2 = default(string))
        {
            this.FaceId1 = faceId1;
            this.FaceId2 = faceId2;
        }

        /// <summary>
        /// Gets or Sets FaceId1
        /// </summary>
        [DataMember(Name = "faceId1", EmitDefaultValue = true)]
        public string FaceId1 { get; set; }

        /// <summary>
        /// Gets or Sets FaceId2
        /// </summary>
        [DataMember(Name = "faceId2", EmitDefaultValue = true)]
        public string FaceId2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VerifyFaceData {\n");
            sb.Append("  FaceId1: ").Append(FaceId1).Append("\n");
            sb.Append("  FaceId2: ").Append(FaceId2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VerifyFaceData);
        }

        /// <summary>
        /// Returns true if VerifyFaceData instances are equal
        /// </summary>
        /// <param name="input">Instance of VerifyFaceData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VerifyFaceData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FaceId1 == input.FaceId1 ||
                    (this.FaceId1 != null &&
                    this.FaceId1.Equals(input.FaceId1))
                ) && 
                (
                    this.FaceId2 == input.FaceId2 ||
                    (this.FaceId2 != null &&
                    this.FaceId2.Equals(input.FaceId2))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FaceId1 != null)
                    hashCode = hashCode * 59 + this.FaceId1.GetHashCode();
                if (this.FaceId2 != null)
                    hashCode = hashCode * 59 + this.FaceId2.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
