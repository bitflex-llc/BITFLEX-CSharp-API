/*
 * BITFLEX Public API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GetVerificationLevelResponse
    /// </summary>
    [DataContract(Name = "GetVerificationLevelResponse")]
    public partial class GetVerificationLevelResponse : IEquatable<GetVerificationLevelResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetVerificationLevelResponse" /> class.
        /// </summary>
        /// <param name="verificationLevel">verificationLevel.</param>
        /// <param name="withdrawLimits">withdrawLimits.</param>
        public GetVerificationLevelResponse(int verificationLevel = default(int), Dictionary<string, int> withdrawLimits = default(Dictionary<string, int>))
        {
            this.VerificationLevel = verificationLevel;
            this.WithdrawLimits = withdrawLimits;
        }

        /// <summary>
        /// Gets or Sets VerificationLevel
        /// </summary>
        [DataMember(Name = "verificationLevel", EmitDefaultValue = false)]
        public int VerificationLevel { get; set; }

        /// <summary>
        /// Gets or Sets WithdrawLimits
        /// </summary>
        [DataMember(Name = "withdrawLimits", EmitDefaultValue = true)]
        public Dictionary<string, int> WithdrawLimits { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetVerificationLevelResponse {\n");
            sb.Append("  VerificationLevel: ").Append(VerificationLevel).Append("\n");
            sb.Append("  WithdrawLimits: ").Append(WithdrawLimits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetVerificationLevelResponse);
        }

        /// <summary>
        /// Returns true if GetVerificationLevelResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetVerificationLevelResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetVerificationLevelResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.VerificationLevel == input.VerificationLevel ||
                    this.VerificationLevel.Equals(input.VerificationLevel)
                ) && 
                (
                    this.WithdrawLimits == input.WithdrawLimits ||
                    this.WithdrawLimits != null &&
                    input.WithdrawLimits != null &&
                    this.WithdrawLimits.SequenceEqual(input.WithdrawLimits)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.VerificationLevel.GetHashCode();
                if (this.WithdrawLimits != null)
                    hashCode = hashCode * 59 + this.WithdrawLimits.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
