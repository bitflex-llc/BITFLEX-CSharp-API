/*
 * BITFLEX Public API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GetBalanceHoldAndLimits
    /// </summary>
    [DataContract(Name = "GetBalanceHoldAndLimits")]
    public partial class GetBalanceHoldAndLimits : IEquatable<GetBalanceHoldAndLimits>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetBalanceHoldAndLimits" /> class.
        /// </summary>
        /// <param name="usdHoldings">usdHoldings.</param>
        /// <param name="btcHoldings">btcHoldings.</param>
        /// <param name="limit">limit.</param>
        /// <param name="usedLimit">usedLimit.</param>
        public GetBalanceHoldAndLimits(double usdHoldings = default(double), double btcHoldings = default(double), double limit = default(double), double usedLimit = default(double))
        {
            this.UsdHoldings = usdHoldings;
            this.BtcHoldings = btcHoldings;
            this.Limit = limit;
            this.UsedLimit = usedLimit;
        }

        /// <summary>
        /// Gets or Sets UsdHoldings
        /// </summary>
        [DataMember(Name = "usdHoldings", EmitDefaultValue = false)]
        public double UsdHoldings { get; set; }

        /// <summary>
        /// Gets or Sets BtcHoldings
        /// </summary>
        [DataMember(Name = "btcHoldings", EmitDefaultValue = false)]
        public double BtcHoldings { get; set; }

        /// <summary>
        /// Gets or Sets Limit
        /// </summary>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        public double Limit { get; set; }

        /// <summary>
        /// Gets or Sets UsedLimit
        /// </summary>
        [DataMember(Name = "usedLimit", EmitDefaultValue = false)]
        public double UsedLimit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetBalanceHoldAndLimits {\n");
            sb.Append("  UsdHoldings: ").Append(UsdHoldings).Append("\n");
            sb.Append("  BtcHoldings: ").Append(BtcHoldings).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  UsedLimit: ").Append(UsedLimit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetBalanceHoldAndLimits);
        }

        /// <summary>
        /// Returns true if GetBalanceHoldAndLimits instances are equal
        /// </summary>
        /// <param name="input">Instance of GetBalanceHoldAndLimits to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetBalanceHoldAndLimits input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UsdHoldings == input.UsdHoldings ||
                    this.UsdHoldings.Equals(input.UsdHoldings)
                ) && 
                (
                    this.BtcHoldings == input.BtcHoldings ||
                    this.BtcHoldings.Equals(input.BtcHoldings)
                ) && 
                (
                    this.Limit == input.Limit ||
                    this.Limit.Equals(input.Limit)
                ) && 
                (
                    this.UsedLimit == input.UsedLimit ||
                    this.UsedLimit.Equals(input.UsedLimit)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.UsdHoldings.GetHashCode();
                hashCode = hashCode * 59 + this.BtcHoldings.GetHashCode();
                hashCode = hashCode * 59 + this.Limit.GetHashCode();
                hashCode = hashCode * 59 + this.UsedLimit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
