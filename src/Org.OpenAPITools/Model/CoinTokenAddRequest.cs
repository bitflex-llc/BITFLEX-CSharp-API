/*
 * BITFLEX Public API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CoinTokenAddRequest
    /// </summary>
    [DataContract(Name = "CoinTokenAddRequest")]
    public partial class CoinTokenAddRequest : IEquatable<CoinTokenAddRequest>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets CurrencyType
        /// </summary>
        [DataMember(Name = "currencyType", EmitDefaultValue = false)]
        public Type? CurrencyType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CoinTokenAddRequest" /> class.
        /// </summary>
        /// <param name="cmcUrl">cmcUrl.</param>
        /// <param name="contractAddress">contractAddress.</param>
        /// <param name="currencyType">currencyType.</param>
        /// <param name="explolerUrl">explolerUrl.</param>
        /// <param name="withdrawFee">withdrawFee.</param>
        /// <param name="withdrawFeePercent">withdrawFeePercent.</param>
        /// <param name="confirmationCount">confirmationCount.</param>
        /// <param name="decimals">decimals.</param>
        /// <param name="rpcIP">rpcIP.</param>
        /// <param name="rpcPort">rpcPort.</param>
        /// <param name="rpcUsername">rpcUsername.</param>
        /// <param name="rpcPassword">rpcPassword.</param>
        public CoinTokenAddRequest(string cmcUrl = default(string), string contractAddress = default(string), Type? currencyType = default(Type?), string explolerUrl = default(string), double? withdrawFee = default(double?), double? withdrawFeePercent = default(double?), int? confirmationCount = default(int?), int? decimals = default(int?), string rpcIP = default(string), string rpcPort = default(string), string rpcUsername = default(string), string rpcPassword = default(string))
        {
            this.CmcUrl = cmcUrl;
            this.ContractAddress = contractAddress;
            this.CurrencyType = currencyType;
            this.ExplolerUrl = explolerUrl;
            this.WithdrawFee = withdrawFee;
            this.WithdrawFeePercent = withdrawFeePercent;
            this.ConfirmationCount = confirmationCount;
            this.Decimals = decimals;
            this.RpcIP = rpcIP;
            this.RpcPort = rpcPort;
            this.RpcUsername = rpcUsername;
            this.RpcPassword = rpcPassword;
        }

        /// <summary>
        /// Gets or Sets CmcUrl
        /// </summary>
        [DataMember(Name = "cmcUrl", EmitDefaultValue = true)]
        public string CmcUrl { get; set; }

        /// <summary>
        /// Gets or Sets ContractAddress
        /// </summary>
        [DataMember(Name = "contractAddress", EmitDefaultValue = true)]
        public string ContractAddress { get; set; }

        /// <summary>
        /// Gets or Sets ExplolerUrl
        /// </summary>
        [DataMember(Name = "explolerUrl", EmitDefaultValue = true)]
        public string ExplolerUrl { get; set; }

        /// <summary>
        /// Gets or Sets WithdrawFee
        /// </summary>
        [DataMember(Name = "withdrawFee", EmitDefaultValue = true)]
        public double? WithdrawFee { get; set; }

        /// <summary>
        /// Gets or Sets WithdrawFeePercent
        /// </summary>
        [DataMember(Name = "withdrawFeePercent", EmitDefaultValue = true)]
        public double? WithdrawFeePercent { get; set; }

        /// <summary>
        /// Gets or Sets ConfirmationCount
        /// </summary>
        [DataMember(Name = "confirmationCount", EmitDefaultValue = true)]
        public int? ConfirmationCount { get; set; }

        /// <summary>
        /// Gets or Sets Decimals
        /// </summary>
        [DataMember(Name = "decimals", EmitDefaultValue = true)]
        public int? Decimals { get; set; }

        /// <summary>
        /// Gets or Sets RpcIP
        /// </summary>
        [DataMember(Name = "rpcIP", EmitDefaultValue = true)]
        public string RpcIP { get; set; }

        /// <summary>
        /// Gets or Sets RpcPort
        /// </summary>
        [DataMember(Name = "rpcPort", EmitDefaultValue = true)]
        public string RpcPort { get; set; }

        /// <summary>
        /// Gets or Sets RpcUsername
        /// </summary>
        [DataMember(Name = "rpcUsername", EmitDefaultValue = true)]
        public string RpcUsername { get; set; }

        /// <summary>
        /// Gets or Sets RpcPassword
        /// </summary>
        [DataMember(Name = "rpcPassword", EmitDefaultValue = true)]
        public string RpcPassword { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CoinTokenAddRequest {\n");
            sb.Append("  CmcUrl: ").Append(CmcUrl).Append("\n");
            sb.Append("  ContractAddress: ").Append(ContractAddress).Append("\n");
            sb.Append("  CurrencyType: ").Append(CurrencyType).Append("\n");
            sb.Append("  ExplolerUrl: ").Append(ExplolerUrl).Append("\n");
            sb.Append("  WithdrawFee: ").Append(WithdrawFee).Append("\n");
            sb.Append("  WithdrawFeePercent: ").Append(WithdrawFeePercent).Append("\n");
            sb.Append("  ConfirmationCount: ").Append(ConfirmationCount).Append("\n");
            sb.Append("  Decimals: ").Append(Decimals).Append("\n");
            sb.Append("  RpcIP: ").Append(RpcIP).Append("\n");
            sb.Append("  RpcPort: ").Append(RpcPort).Append("\n");
            sb.Append("  RpcUsername: ").Append(RpcUsername).Append("\n");
            sb.Append("  RpcPassword: ").Append(RpcPassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CoinTokenAddRequest);
        }

        /// <summary>
        /// Returns true if CoinTokenAddRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CoinTokenAddRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CoinTokenAddRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CmcUrl == input.CmcUrl ||
                    (this.CmcUrl != null &&
                    this.CmcUrl.Equals(input.CmcUrl))
                ) && 
                (
                    this.ContractAddress == input.ContractAddress ||
                    (this.ContractAddress != null &&
                    this.ContractAddress.Equals(input.ContractAddress))
                ) && 
                (
                    this.CurrencyType == input.CurrencyType ||
                    this.CurrencyType.Equals(input.CurrencyType)
                ) && 
                (
                    this.ExplolerUrl == input.ExplolerUrl ||
                    (this.ExplolerUrl != null &&
                    this.ExplolerUrl.Equals(input.ExplolerUrl))
                ) && 
                (
                    this.WithdrawFee == input.WithdrawFee ||
                    (this.WithdrawFee != null &&
                    this.WithdrawFee.Equals(input.WithdrawFee))
                ) && 
                (
                    this.WithdrawFeePercent == input.WithdrawFeePercent ||
                    (this.WithdrawFeePercent != null &&
                    this.WithdrawFeePercent.Equals(input.WithdrawFeePercent))
                ) && 
                (
                    this.ConfirmationCount == input.ConfirmationCount ||
                    (this.ConfirmationCount != null &&
                    this.ConfirmationCount.Equals(input.ConfirmationCount))
                ) && 
                (
                    this.Decimals == input.Decimals ||
                    (this.Decimals != null &&
                    this.Decimals.Equals(input.Decimals))
                ) && 
                (
                    this.RpcIP == input.RpcIP ||
                    (this.RpcIP != null &&
                    this.RpcIP.Equals(input.RpcIP))
                ) && 
                (
                    this.RpcPort == input.RpcPort ||
                    (this.RpcPort != null &&
                    this.RpcPort.Equals(input.RpcPort))
                ) && 
                (
                    this.RpcUsername == input.RpcUsername ||
                    (this.RpcUsername != null &&
                    this.RpcUsername.Equals(input.RpcUsername))
                ) && 
                (
                    this.RpcPassword == input.RpcPassword ||
                    (this.RpcPassword != null &&
                    this.RpcPassword.Equals(input.RpcPassword))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CmcUrl != null)
                    hashCode = hashCode * 59 + this.CmcUrl.GetHashCode();
                if (this.ContractAddress != null)
                    hashCode = hashCode * 59 + this.ContractAddress.GetHashCode();
                hashCode = hashCode * 59 + this.CurrencyType.GetHashCode();
                if (this.ExplolerUrl != null)
                    hashCode = hashCode * 59 + this.ExplolerUrl.GetHashCode();
                if (this.WithdrawFee != null)
                    hashCode = hashCode * 59 + this.WithdrawFee.GetHashCode();
                if (this.WithdrawFeePercent != null)
                    hashCode = hashCode * 59 + this.WithdrawFeePercent.GetHashCode();
                if (this.ConfirmationCount != null)
                    hashCode = hashCode * 59 + this.ConfirmationCount.GetHashCode();
                if (this.Decimals != null)
                    hashCode = hashCode * 59 + this.Decimals.GetHashCode();
                if (this.RpcIP != null)
                    hashCode = hashCode * 59 + this.RpcIP.GetHashCode();
                if (this.RpcPort != null)
                    hashCode = hashCode * 59 + this.RpcPort.GetHashCode();
                if (this.RpcUsername != null)
                    hashCode = hashCode * 59 + this.RpcUsername.GetHashCode();
                if (this.RpcPassword != null)
                    hashCode = hashCode * 59 + this.RpcPassword.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
