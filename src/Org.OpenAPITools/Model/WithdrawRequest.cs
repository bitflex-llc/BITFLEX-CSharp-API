/*
 * BITFLEX Public API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// WithdrawRequest
    /// </summary>
    [DataContract(Name = "WithdrawRequest")]
    public partial class WithdrawRequest : IEquatable<WithdrawRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WithdrawRequest" /> class.
        /// </summary>
        /// <param name="amount">amount.</param>
        /// <param name="dateCreated">dateCreated.</param>
        /// <param name="paid">paid.</param>
        /// <param name="datePaid">datePaid.</param>
        /// <param name="txId">txId.</param>
        /// <param name="destinationAddress">destinationAddress.</param>
        /// <param name="destinationTag">destinationTag.</param>
        public WithdrawRequest(double amount = default(double), long dateCreated = default(long), bool paid = default(bool), long? datePaid = default(long?), string txId = default(string), string destinationAddress = default(string), string destinationTag = default(string))
        {
            this.Amount = amount;
            this.DateCreated = dateCreated;
            this.Paid = paid;
            this.DatePaid = datePaid;
            this.TxId = txId;
            this.DestinationAddress = destinationAddress;
            this.DestinationTag = destinationTag;
        }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public double Amount { get; set; }

        /// <summary>
        /// Gets or Sets DateCreated
        /// </summary>
        [DataMember(Name = "dateCreated", EmitDefaultValue = false)]
        public long DateCreated { get; set; }

        /// <summary>
        /// Gets or Sets Paid
        /// </summary>
        [DataMember(Name = "paid", EmitDefaultValue = false)]
        public bool Paid { get; set; }

        /// <summary>
        /// Gets or Sets DatePaid
        /// </summary>
        [DataMember(Name = "datePaid", EmitDefaultValue = true)]
        public long? DatePaid { get; set; }

        /// <summary>
        /// Gets or Sets TxId
        /// </summary>
        [DataMember(Name = "txId", EmitDefaultValue = true)]
        public string TxId { get; set; }

        /// <summary>
        /// Gets or Sets DestinationAddress
        /// </summary>
        [DataMember(Name = "destinationAddress", EmitDefaultValue = true)]
        public string DestinationAddress { get; set; }

        /// <summary>
        /// Gets or Sets DestinationTag
        /// </summary>
        [DataMember(Name = "destinationTag", EmitDefaultValue = true)]
        public string DestinationTag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WithdrawRequest {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  Paid: ").Append(Paid).Append("\n");
            sb.Append("  DatePaid: ").Append(DatePaid).Append("\n");
            sb.Append("  TxId: ").Append(TxId).Append("\n");
            sb.Append("  DestinationAddress: ").Append(DestinationAddress).Append("\n");
            sb.Append("  DestinationTag: ").Append(DestinationTag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WithdrawRequest);
        }

        /// <summary>
        /// Returns true if WithdrawRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of WithdrawRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WithdrawRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.DateCreated == input.DateCreated ||
                    this.DateCreated.Equals(input.DateCreated)
                ) && 
                (
                    this.Paid == input.Paid ||
                    this.Paid.Equals(input.Paid)
                ) && 
                (
                    this.DatePaid == input.DatePaid ||
                    (this.DatePaid != null &&
                    this.DatePaid.Equals(input.DatePaid))
                ) && 
                (
                    this.TxId == input.TxId ||
                    (this.TxId != null &&
                    this.TxId.Equals(input.TxId))
                ) && 
                (
                    this.DestinationAddress == input.DestinationAddress ||
                    (this.DestinationAddress != null &&
                    this.DestinationAddress.Equals(input.DestinationAddress))
                ) && 
                (
                    this.DestinationTag == input.DestinationTag ||
                    (this.DestinationTag != null &&
                    this.DestinationTag.Equals(input.DestinationTag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Amount.GetHashCode();
                hashCode = hashCode * 59 + this.DateCreated.GetHashCode();
                hashCode = hashCode * 59 + this.Paid.GetHashCode();
                if (this.DatePaid != null)
                    hashCode = hashCode * 59 + this.DatePaid.GetHashCode();
                if (this.TxId != null)
                    hashCode = hashCode * 59 + this.TxId.GetHashCode();
                if (this.DestinationAddress != null)
                    hashCode = hashCode * 59 + this.DestinationAddress.GetHashCode();
                if (this.DestinationTag != null)
                    hashCode = hashCode * 59 + this.DestinationTag.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
