/*
 * BITFLEX Public API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GetAddressResponse
    /// </summary>
    [DataContract(Name = "GetAddressResponse")]
    public partial class GetAddressResponse : IEquatable<GetAddressResponse>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets CurrencyType
        /// </summary>
        [DataMember(Name = "currencyType", EmitDefaultValue = false)]
        public Type? CurrencyType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAddressResponse" /> class.
        /// </summary>
        /// <param name="address">address.</param>
        /// <param name="isAddressGenerated">isAddressGenerated.</param>
        /// <param name="currency">currency.</param>
        /// <param name="fullname">fullname.</param>
        /// <param name="totalAmount">totalAmount.</param>
        /// <param name="availableAmount">availableAmount.</param>
        /// <param name="confirmationCount">confirmationCount.</param>
        /// <param name="destinationTag">destinationTag.</param>
        /// <param name="currencyType">currencyType.</param>
        /// <param name="isManual">isManual.</param>
        /// <param name="errorCode">errorCode.</param>
        public GetAddressResponse(string address = default(string), bool isAddressGenerated = default(bool), string currency = default(string), string fullname = default(string), double totalAmount = default(double), double availableAmount = default(double), int confirmationCount = default(int), string destinationTag = default(string), Type? currencyType = default(Type?), bool isManual = default(bool), BalanceErrorCode errorCode = default(BalanceErrorCode))
        {
            this.Address = address;
            this.IsAddressGenerated = isAddressGenerated;
            this.Currency = currency;
            this.Fullname = fullname;
            this.TotalAmount = totalAmount;
            this.AvailableAmount = availableAmount;
            this.ConfirmationCount = confirmationCount;
            this.DestinationTag = destinationTag;
            this.CurrencyType = currencyType;
            this.IsManual = isManual;
            this.ErrorCode = errorCode;
        }

        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [DataMember(Name = "success", EmitDefaultValue = false)]
        public bool Success { get; private set; }

        /// <summary>
        /// Returns false as Success should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSuccess()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = true)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets IsAddressGenerated
        /// </summary>
        [DataMember(Name = "isAddressGenerated", EmitDefaultValue = false)]
        public bool IsAddressGenerated { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Fullname
        /// </summary>
        [DataMember(Name = "fullname", EmitDefaultValue = true)]
        public string Fullname { get; set; }

        /// <summary>
        /// Gets or Sets TotalAmount
        /// </summary>
        [DataMember(Name = "totalAmount", EmitDefaultValue = false)]
        public double TotalAmount { get; set; }

        /// <summary>
        /// Gets or Sets AvailableAmount
        /// </summary>
        [DataMember(Name = "availableAmount", EmitDefaultValue = false)]
        public double AvailableAmount { get; set; }

        /// <summary>
        /// Gets or Sets ConfirmationCount
        /// </summary>
        [DataMember(Name = "confirmationCount", EmitDefaultValue = false)]
        public int ConfirmationCount { get; set; }

        /// <summary>
        /// Gets or Sets DestinationTag
        /// </summary>
        [DataMember(Name = "destinationTag", EmitDefaultValue = true)]
        public string DestinationTag { get; set; }

        /// <summary>
        /// Gets or Sets IsManual
        /// </summary>
        [DataMember(Name = "isManual", EmitDefaultValue = false)]
        public bool IsManual { get; set; }

        /// <summary>
        /// Gets or Sets ErrorCode
        /// </summary>
        [DataMember(Name = "errorCode", EmitDefaultValue = false)]
        public BalanceErrorCode ErrorCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetAddressResponse {\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  IsAddressGenerated: ").Append(IsAddressGenerated).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Fullname: ").Append(Fullname).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  AvailableAmount: ").Append(AvailableAmount).Append("\n");
            sb.Append("  ConfirmationCount: ").Append(ConfirmationCount).Append("\n");
            sb.Append("  DestinationTag: ").Append(DestinationTag).Append("\n");
            sb.Append("  CurrencyType: ").Append(CurrencyType).Append("\n");
            sb.Append("  IsManual: ").Append(IsManual).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetAddressResponse);
        }

        /// <summary>
        /// Returns true if GetAddressResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetAddressResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetAddressResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Success == input.Success ||
                    this.Success.Equals(input.Success)
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.IsAddressGenerated == input.IsAddressGenerated ||
                    this.IsAddressGenerated.Equals(input.IsAddressGenerated)
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Fullname == input.Fullname ||
                    (this.Fullname != null &&
                    this.Fullname.Equals(input.Fullname))
                ) && 
                (
                    this.TotalAmount == input.TotalAmount ||
                    this.TotalAmount.Equals(input.TotalAmount)
                ) && 
                (
                    this.AvailableAmount == input.AvailableAmount ||
                    this.AvailableAmount.Equals(input.AvailableAmount)
                ) && 
                (
                    this.ConfirmationCount == input.ConfirmationCount ||
                    this.ConfirmationCount.Equals(input.ConfirmationCount)
                ) && 
                (
                    this.DestinationTag == input.DestinationTag ||
                    (this.DestinationTag != null &&
                    this.DestinationTag.Equals(input.DestinationTag))
                ) && 
                (
                    this.CurrencyType == input.CurrencyType ||
                    this.CurrencyType.Equals(input.CurrencyType)
                ) && 
                (
                    this.IsManual == input.IsManual ||
                    this.IsManual.Equals(input.IsManual)
                ) && 
                (
                    this.ErrorCode == input.ErrorCode ||
                    (this.ErrorCode != null &&
                    this.ErrorCode.Equals(input.ErrorCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Success.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                hashCode = hashCode * 59 + this.IsAddressGenerated.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Fullname != null)
                    hashCode = hashCode * 59 + this.Fullname.GetHashCode();
                hashCode = hashCode * 59 + this.TotalAmount.GetHashCode();
                hashCode = hashCode * 59 + this.AvailableAmount.GetHashCode();
                hashCode = hashCode * 59 + this.ConfirmationCount.GetHashCode();
                if (this.DestinationTag != null)
                    hashCode = hashCode * 59 + this.DestinationTag.GetHashCode();
                hashCode = hashCode * 59 + this.CurrencyType.GetHashCode();
                hashCode = hashCode * 59 + this.IsManual.GetHashCode();
                if (this.ErrorCode != null)
                    hashCode = hashCode * 59 + this.ErrorCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
