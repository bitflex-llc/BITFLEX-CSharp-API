/*
 * BITFLEX Public API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PostSignInResponse
    /// </summary>
    [DataContract(Name = "PostSignInResponse")]
    public partial class PostSignInResponse : IEquatable<PostSignInResponse>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name = "result", EmitDefaultValue = false)]
        public SignInResponseResult? Result { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostSignInResponse" /> class.
        /// </summary>
        /// <param name="result">result.</param>
        /// <param name="authToken">authToken.</param>
        /// <param name="expiryTimestamp">expiryTimestamp.</param>
        /// <param name="twoFactorToken">twoFactorToken.</param>
        /// <param name="userId">userId.</param>
        public PostSignInResponse(SignInResponseResult? result = default(SignInResponseResult?), string authToken = default(string), long expiryTimestamp = default(long), string twoFactorToken = default(string), string userId = default(string))
        {
            this.Result = result;
            this.AuthToken = authToken;
            this.ExpiryTimestamp = expiryTimestamp;
            this.TwoFactorToken = twoFactorToken;
            this.UserId = userId;
        }

        /// <summary>
        /// Gets or Sets AuthToken
        /// </summary>
        [DataMember(Name = "authToken", EmitDefaultValue = true)]
        public string AuthToken { get; set; }

        /// <summary>
        /// Gets or Sets ExpiryTimestamp
        /// </summary>
        [DataMember(Name = "expiryTimestamp", EmitDefaultValue = false)]
        public long ExpiryTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets TwoFactorToken
        /// </summary>
        [DataMember(Name = "twoFactorToken", EmitDefaultValue = true)]
        public string TwoFactorToken { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "userId", EmitDefaultValue = true)]
        public string UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PostSignInResponse {\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  AuthToken: ").Append(AuthToken).Append("\n");
            sb.Append("  ExpiryTimestamp: ").Append(ExpiryTimestamp).Append("\n");
            sb.Append("  TwoFactorToken: ").Append(TwoFactorToken).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostSignInResponse);
        }

        /// <summary>
        /// Returns true if PostSignInResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of PostSignInResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostSignInResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Result == input.Result ||
                    this.Result.Equals(input.Result)
                ) && 
                (
                    this.AuthToken == input.AuthToken ||
                    (this.AuthToken != null &&
                    this.AuthToken.Equals(input.AuthToken))
                ) && 
                (
                    this.ExpiryTimestamp == input.ExpiryTimestamp ||
                    this.ExpiryTimestamp.Equals(input.ExpiryTimestamp)
                ) && 
                (
                    this.TwoFactorToken == input.TwoFactorToken ||
                    (this.TwoFactorToken != null &&
                    this.TwoFactorToken.Equals(input.TwoFactorToken))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Result.GetHashCode();
                if (this.AuthToken != null)
                    hashCode = hashCode * 59 + this.AuthToken.GetHashCode();
                hashCode = hashCode * 59 + this.ExpiryTimestamp.GetHashCode();
                if (this.TwoFactorToken != null)
                    hashCode = hashCode * 59 + this.TwoFactorToken.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
