/*
 * BITFLEX Public API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ApiTickers
    /// </summary>
    [DataContract(Name = "ApiTickers")]
    public partial class ApiTickers : IEquatable<ApiTickers>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiTickers" /> class.
        /// </summary>
        /// <param name="pair">pair.</param>
        /// <param name="price">price.</param>
        /// <param name="volume">volume.</param>
        /// <param name="pairVolume">pairVolume.</param>
        /// <param name="high">high.</param>
        /// <param name="low">low.</param>
        /// <param name="change">change.</param>
        public ApiTickers(string pair = default(string), double price = default(double), double volume = default(double), double pairVolume = default(double), double high = default(double), double low = default(double), double change = default(double))
        {
            this.Pair = pair;
            this.Price = price;
            this.Volume = volume;
            this.PairVolume = pairVolume;
            this.High = high;
            this.Low = low;
            this.Change = change;
        }

        /// <summary>
        /// Gets or Sets Pair
        /// </summary>
        [DataMember(Name = "pair", EmitDefaultValue = true)]
        public string Pair { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public double Price { get; set; }

        /// <summary>
        /// Gets or Sets Volume
        /// </summary>
        [DataMember(Name = "volume", EmitDefaultValue = false)]
        public double Volume { get; set; }

        /// <summary>
        /// Gets or Sets PairVolume
        /// </summary>
        [DataMember(Name = "pairVolume", EmitDefaultValue = false)]
        public double PairVolume { get; set; }

        /// <summary>
        /// Gets or Sets High
        /// </summary>
        [DataMember(Name = "high", EmitDefaultValue = false)]
        public double High { get; set; }

        /// <summary>
        /// Gets or Sets Low
        /// </summary>
        [DataMember(Name = "low", EmitDefaultValue = false)]
        public double Low { get; set; }

        /// <summary>
        /// Gets or Sets Change
        /// </summary>
        [DataMember(Name = "change", EmitDefaultValue = false)]
        public double Change { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiTickers {\n");
            sb.Append("  Pair: ").Append(Pair).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("  PairVolume: ").Append(PairVolume).Append("\n");
            sb.Append("  High: ").Append(High).Append("\n");
            sb.Append("  Low: ").Append(Low).Append("\n");
            sb.Append("  Change: ").Append(Change).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiTickers);
        }

        /// <summary>
        /// Returns true if ApiTickers instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiTickers to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiTickers input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Pair == input.Pair ||
                    (this.Pair != null &&
                    this.Pair.Equals(input.Pair))
                ) && 
                (
                    this.Price == input.Price ||
                    this.Price.Equals(input.Price)
                ) && 
                (
                    this.Volume == input.Volume ||
                    this.Volume.Equals(input.Volume)
                ) && 
                (
                    this.PairVolume == input.PairVolume ||
                    this.PairVolume.Equals(input.PairVolume)
                ) && 
                (
                    this.High == input.High ||
                    this.High.Equals(input.High)
                ) && 
                (
                    this.Low == input.Low ||
                    this.Low.Equals(input.Low)
                ) && 
                (
                    this.Change == input.Change ||
                    this.Change.Equals(input.Change)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Pair != null)
                    hashCode = hashCode * 59 + this.Pair.GetHashCode();
                hashCode = hashCode * 59 + this.Price.GetHashCode();
                hashCode = hashCode * 59 + this.Volume.GetHashCode();
                hashCode = hashCode * 59 + this.PairVolume.GetHashCode();
                hashCode = hashCode * 59 + this.High.GetHashCode();
                hashCode = hashCode * 59 + this.Low.GetHashCode();
                hashCode = hashCode * 59 + this.Change.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
