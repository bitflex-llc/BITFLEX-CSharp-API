/*
 * BITFLEX Public API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GetUserTradeHistoryResponse
    /// </summary>
    [DataContract(Name = "GetUserTradeHistoryResponse")]
    public partial class GetUserTradeHistoryResponse : IEquatable<GetUserTradeHistoryResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUserTradeHistoryResponse" /> class.
        /// </summary>
        /// <param name="orders">orders.</param>
        /// <param name="pages">pages.</param>
        public GetUserTradeHistoryResponse(List<ApiGetTradeHistory> orders = default(List<ApiGetTradeHistory>), int pages = default(int))
        {
            this.Orders = orders;
            this.Pages = pages;
        }

        /// <summary>
        /// Gets or Sets Orders
        /// </summary>
        [DataMember(Name = "orders", EmitDefaultValue = true)]
        public List<ApiGetTradeHistory> Orders { get; set; }

        /// <summary>
        /// Gets or Sets Pages
        /// </summary>
        [DataMember(Name = "pages", EmitDefaultValue = false)]
        public int Pages { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetUserTradeHistoryResponse {\n");
            sb.Append("  Orders: ").Append(Orders).Append("\n");
            sb.Append("  Pages: ").Append(Pages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetUserTradeHistoryResponse);
        }

        /// <summary>
        /// Returns true if GetUserTradeHistoryResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetUserTradeHistoryResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetUserTradeHistoryResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Orders == input.Orders ||
                    this.Orders != null &&
                    input.Orders != null &&
                    this.Orders.SequenceEqual(input.Orders)
                ) && 
                (
                    this.Pages == input.Pages ||
                    this.Pages.Equals(input.Pages)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Orders != null)
                    hashCode = hashCode * 59 + this.Orders.GetHashCode();
                hashCode = hashCode * 59 + this.Pages.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
