/*
 * BITFLEX Public API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// VerificationResource
    /// </summary>
    [DataContract(Name = "VerificationResource")]
    public partial class VerificationResource : IEquatable<VerificationResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VerificationResource" /> class.
        /// </summary>
        /// <param name="channel">channel.</param>
        public VerificationResource(Object channel = default(Object))
        {
            this.Channel = channel;
        }

        /// <summary>
        /// Gets or Sets Sid
        /// </summary>
        [DataMember(Name = "sid", EmitDefaultValue = true)]
        public string Sid { get; private set; }

        /// <summary>
        /// Returns false as Sid should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSid()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets ServiceSid
        /// </summary>
        [DataMember(Name = "serviceSid", EmitDefaultValue = true)]
        public string ServiceSid { get; private set; }

        /// <summary>
        /// Returns false as ServiceSid should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeServiceSid()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets AccountSid
        /// </summary>
        [DataMember(Name = "accountSid", EmitDefaultValue = true)]
        public string AccountSid { get; private set; }

        /// <summary>
        /// Returns false as AccountSid should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAccountSid()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name = "to", EmitDefaultValue = true)]
        public string To { get; private set; }

        /// <summary>
        /// Returns false as To should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTo()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets Channel
        /// </summary>
        [DataMember(Name = "channel", EmitDefaultValue = false)]
        public Object Channel { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = true)]
        public string Status { get; private set; }

        /// <summary>
        /// Returns false as Status should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStatus()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets Valid
        /// </summary>
        [DataMember(Name = "valid", EmitDefaultValue = true)]
        public bool? Valid { get; private set; }

        /// <summary>
        /// Returns false as Valid should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeValid()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets Lookup
        /// </summary>
        [DataMember(Name = "lookup", EmitDefaultValue = true)]
        public Object Lookup { get; private set; }

        /// <summary>
        /// Returns false as Lookup should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLookup()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", EmitDefaultValue = true)]
        public string Amount { get; private set; }

        /// <summary>
        /// Returns false as Amount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmount()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets Payee
        /// </summary>
        [DataMember(Name = "payee", EmitDefaultValue = true)]
        public string Payee { get; private set; }

        /// <summary>
        /// Returns false as Payee should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePayee()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets SendCodeAttempts
        /// </summary>
        [DataMember(Name = "sendCodeAttempts", EmitDefaultValue = true)]
        public List<Object> SendCodeAttempts { get; private set; }

        /// <summary>
        /// Returns false as SendCodeAttempts should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSendCodeAttempts()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets DateCreated
        /// </summary>
        [DataMember(Name = "dateCreated", EmitDefaultValue = true)]
        public DateTime? DateCreated { get; private set; }

        /// <summary>
        /// Returns false as DateCreated should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDateCreated()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets DateUpdated
        /// </summary>
        [DataMember(Name = "dateUpdated", EmitDefaultValue = true)]
        public DateTime? DateUpdated { get; private set; }

        /// <summary>
        /// Returns false as DateUpdated should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDateUpdated()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", EmitDefaultValue = true)]
        public string Url { get; private set; }

        /// <summary>
        /// Returns false as Url should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUrl()
        {
            return false;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VerificationResource {\n");
            sb.Append("  Sid: ").Append(Sid).Append("\n");
            sb.Append("  ServiceSid: ").Append(ServiceSid).Append("\n");
            sb.Append("  AccountSid: ").Append(AccountSid).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Valid: ").Append(Valid).Append("\n");
            sb.Append("  Lookup: ").Append(Lookup).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Payee: ").Append(Payee).Append("\n");
            sb.Append("  SendCodeAttempts: ").Append(SendCodeAttempts).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DateUpdated: ").Append(DateUpdated).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VerificationResource);
        }

        /// <summary>
        /// Returns true if VerificationResource instances are equal
        /// </summary>
        /// <param name="input">Instance of VerificationResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VerificationResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Sid == input.Sid ||
                    (this.Sid != null &&
                    this.Sid.Equals(input.Sid))
                ) && 
                (
                    this.ServiceSid == input.ServiceSid ||
                    (this.ServiceSid != null &&
                    this.ServiceSid.Equals(input.ServiceSid))
                ) && 
                (
                    this.AccountSid == input.AccountSid ||
                    (this.AccountSid != null &&
                    this.AccountSid.Equals(input.AccountSid))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.Channel == input.Channel ||
                    (this.Channel != null &&
                    this.Channel.Equals(input.Channel))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Valid == input.Valid ||
                    (this.Valid != null &&
                    this.Valid.Equals(input.Valid))
                ) && 
                (
                    this.Lookup == input.Lookup ||
                    (this.Lookup != null &&
                    this.Lookup.Equals(input.Lookup))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Payee == input.Payee ||
                    (this.Payee != null &&
                    this.Payee.Equals(input.Payee))
                ) && 
                (
                    this.SendCodeAttempts == input.SendCodeAttempts ||
                    this.SendCodeAttempts != null &&
                    input.SendCodeAttempts != null &&
                    this.SendCodeAttempts.SequenceEqual(input.SendCodeAttempts)
                ) && 
                (
                    this.DateCreated == input.DateCreated ||
                    (this.DateCreated != null &&
                    this.DateCreated.Equals(input.DateCreated))
                ) && 
                (
                    this.DateUpdated == input.DateUpdated ||
                    (this.DateUpdated != null &&
                    this.DateUpdated.Equals(input.DateUpdated))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Sid != null)
                    hashCode = hashCode * 59 + this.Sid.GetHashCode();
                if (this.ServiceSid != null)
                    hashCode = hashCode * 59 + this.ServiceSid.GetHashCode();
                if (this.AccountSid != null)
                    hashCode = hashCode * 59 + this.AccountSid.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.Channel != null)
                    hashCode = hashCode * 59 + this.Channel.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Valid != null)
                    hashCode = hashCode * 59 + this.Valid.GetHashCode();
                if (this.Lookup != null)
                    hashCode = hashCode * 59 + this.Lookup.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Payee != null)
                    hashCode = hashCode * 59 + this.Payee.GetHashCode();
                if (this.SendCodeAttempts != null)
                    hashCode = hashCode * 59 + this.SendCodeAttempts.GetHashCode();
                if (this.DateCreated != null)
                    hashCode = hashCode * 59 + this.DateCreated.GetHashCode();
                if (this.DateUpdated != null)
                    hashCode = hashCode * 59 + this.DateUpdated.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
