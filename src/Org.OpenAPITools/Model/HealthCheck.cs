/*
 * BITFLEX Public API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// HealthCheck
    /// </summary>
    [DataContract(Name = "HealthCheck")]
    public partial class HealthCheck : IEquatable<HealthCheck>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HealthCheck" /> class.
        /// </summary>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="asia">asia.</param>
        /// <param name="india">india.</param>
        /// <param name="europe">europe.</param>
        /// <param name="america">america.</param>
        public HealthCheck(long timestamp = default(long), int? asia = default(int?), int? india = default(int?), int? europe = default(int?), int? america = default(int?))
        {
            this.Timestamp = timestamp;
            this.Asia = asia;
            this.India = india;
            this.Europe = europe;
            this.America = america;
        }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name = "timestamp", EmitDefaultValue = false)]
        public long Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets Asia
        /// </summary>
        [DataMember(Name = "asia", EmitDefaultValue = true)]
        public int? Asia { get; set; }

        /// <summary>
        /// Gets or Sets India
        /// </summary>
        [DataMember(Name = "india", EmitDefaultValue = true)]
        public int? India { get; set; }

        /// <summary>
        /// Gets or Sets Europe
        /// </summary>
        [DataMember(Name = "europe", EmitDefaultValue = true)]
        public int? Europe { get; set; }

        /// <summary>
        /// Gets or Sets America
        /// </summary>
        [DataMember(Name = "america", EmitDefaultValue = true)]
        public int? America { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HealthCheck {\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Asia: ").Append(Asia).Append("\n");
            sb.Append("  India: ").Append(India).Append("\n");
            sb.Append("  Europe: ").Append(Europe).Append("\n");
            sb.Append("  America: ").Append(America).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HealthCheck);
        }

        /// <summary>
        /// Returns true if HealthCheck instances are equal
        /// </summary>
        /// <param name="input">Instance of HealthCheck to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HealthCheck input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Timestamp == input.Timestamp ||
                    this.Timestamp.Equals(input.Timestamp)
                ) && 
                (
                    this.Asia == input.Asia ||
                    (this.Asia != null &&
                    this.Asia.Equals(input.Asia))
                ) && 
                (
                    this.India == input.India ||
                    (this.India != null &&
                    this.India.Equals(input.India))
                ) && 
                (
                    this.Europe == input.Europe ||
                    (this.Europe != null &&
                    this.Europe.Equals(input.Europe))
                ) && 
                (
                    this.America == input.America ||
                    (this.America != null &&
                    this.America.Equals(input.America))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.Asia != null)
                    hashCode = hashCode * 59 + this.Asia.GetHashCode();
                if (this.India != null)
                    hashCode = hashCode * 59 + this.India.GetHashCode();
                if (this.Europe != null)
                    hashCode = hashCode * 59 + this.Europe.GetHashCode();
                if (this.America != null)
                    hashCode = hashCode * 59 + this.America.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
