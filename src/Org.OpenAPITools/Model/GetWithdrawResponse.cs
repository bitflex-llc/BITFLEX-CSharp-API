/*
 * BITFLEX Public API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GetWithdrawResponse
    /// </summary>
    [DataContract(Name = "GetWithdrawResponse")]
    public partial class GetWithdrawResponse : IEquatable<GetWithdrawResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetWithdrawResponse" /> class.
        /// </summary>
        /// <param name="longName">longName.</param>
        /// <param name="totalAmount">totalAmount.</param>
        /// <param name="availableAmount">availableAmount.</param>
        /// <param name="maximumWithdrawAmount">maximumWithdrawAmount.</param>
        /// <param name="withdrawFeePercent">withdrawFeePercent.</param>
        /// <param name="withdrawFee">withdrawFee.</param>
        /// <param name="needDestinationTag">needDestinationTag.</param>
        /// <param name="destinationTagName">destinationTagName.</param>
        /// <param name="withdrawDisabled">withdrawDisabled.</param>
        /// <param name="errorCode">errorCode.</param>
        public GetWithdrawResponse(string longName = default(string), double totalAmount = default(double), double availableAmount = default(double), double maximumWithdrawAmount = default(double), double withdrawFeePercent = default(double), double withdrawFee = default(double), bool needDestinationTag = default(bool), string destinationTagName = default(string), bool withdrawDisabled = default(bool), BalanceErrorCode errorCode = default(BalanceErrorCode))
        {
            this.LongName = longName;
            this.TotalAmount = totalAmount;
            this.AvailableAmount = availableAmount;
            this.MaximumWithdrawAmount = maximumWithdrawAmount;
            this.WithdrawFeePercent = withdrawFeePercent;
            this.WithdrawFee = withdrawFee;
            this.NeedDestinationTag = needDestinationTag;
            this.DestinationTagName = destinationTagName;
            this.WithdrawDisabled = withdrawDisabled;
            this.ErrorCode = errorCode;
        }

        /// <summary>
        /// Gets or Sets LongName
        /// </summary>
        [DataMember(Name = "longName", EmitDefaultValue = true)]
        public string LongName { get; set; }

        /// <summary>
        /// Gets or Sets TotalAmount
        /// </summary>
        [DataMember(Name = "totalAmount", EmitDefaultValue = false)]
        public double TotalAmount { get; set; }

        /// <summary>
        /// Gets or Sets AvailableAmount
        /// </summary>
        [DataMember(Name = "availableAmount", EmitDefaultValue = false)]
        public double AvailableAmount { get; set; }

        /// <summary>
        /// Gets or Sets MaximumWithdrawAmount
        /// </summary>
        [DataMember(Name = "maximumWithdrawAmount", EmitDefaultValue = false)]
        public double MaximumWithdrawAmount { get; set; }

        /// <summary>
        /// Gets or Sets WithdrawFeePercent
        /// </summary>
        [DataMember(Name = "withdrawFeePercent", EmitDefaultValue = false)]
        public double WithdrawFeePercent { get; set; }

        /// <summary>
        /// Gets or Sets WithdrawFee
        /// </summary>
        [DataMember(Name = "withdrawFee", EmitDefaultValue = false)]
        public double WithdrawFee { get; set; }

        /// <summary>
        /// Gets or Sets NeedDestinationTag
        /// </summary>
        [DataMember(Name = "needDestinationTag", EmitDefaultValue = false)]
        public bool NeedDestinationTag { get; set; }

        /// <summary>
        /// Gets or Sets DestinationTagName
        /// </summary>
        [DataMember(Name = "destinationTagName", EmitDefaultValue = true)]
        public string DestinationTagName { get; set; }

        /// <summary>
        /// Gets or Sets WithdrawDisabled
        /// </summary>
        [DataMember(Name = "withdrawDisabled", EmitDefaultValue = false)]
        public bool WithdrawDisabled { get; set; }

        /// <summary>
        /// Gets or Sets ErrorCode
        /// </summary>
        [DataMember(Name = "errorCode", EmitDefaultValue = false)]
        public BalanceErrorCode ErrorCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetWithdrawResponse {\n");
            sb.Append("  LongName: ").Append(LongName).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  AvailableAmount: ").Append(AvailableAmount).Append("\n");
            sb.Append("  MaximumWithdrawAmount: ").Append(MaximumWithdrawAmount).Append("\n");
            sb.Append("  WithdrawFeePercent: ").Append(WithdrawFeePercent).Append("\n");
            sb.Append("  WithdrawFee: ").Append(WithdrawFee).Append("\n");
            sb.Append("  NeedDestinationTag: ").Append(NeedDestinationTag).Append("\n");
            sb.Append("  DestinationTagName: ").Append(DestinationTagName).Append("\n");
            sb.Append("  WithdrawDisabled: ").Append(WithdrawDisabled).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetWithdrawResponse);
        }

        /// <summary>
        /// Returns true if GetWithdrawResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetWithdrawResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetWithdrawResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LongName == input.LongName ||
                    (this.LongName != null &&
                    this.LongName.Equals(input.LongName))
                ) && 
                (
                    this.TotalAmount == input.TotalAmount ||
                    this.TotalAmount.Equals(input.TotalAmount)
                ) && 
                (
                    this.AvailableAmount == input.AvailableAmount ||
                    this.AvailableAmount.Equals(input.AvailableAmount)
                ) && 
                (
                    this.MaximumWithdrawAmount == input.MaximumWithdrawAmount ||
                    this.MaximumWithdrawAmount.Equals(input.MaximumWithdrawAmount)
                ) && 
                (
                    this.WithdrawFeePercent == input.WithdrawFeePercent ||
                    this.WithdrawFeePercent.Equals(input.WithdrawFeePercent)
                ) && 
                (
                    this.WithdrawFee == input.WithdrawFee ||
                    this.WithdrawFee.Equals(input.WithdrawFee)
                ) && 
                (
                    this.NeedDestinationTag == input.NeedDestinationTag ||
                    this.NeedDestinationTag.Equals(input.NeedDestinationTag)
                ) && 
                (
                    this.DestinationTagName == input.DestinationTagName ||
                    (this.DestinationTagName != null &&
                    this.DestinationTagName.Equals(input.DestinationTagName))
                ) && 
                (
                    this.WithdrawDisabled == input.WithdrawDisabled ||
                    this.WithdrawDisabled.Equals(input.WithdrawDisabled)
                ) && 
                (
                    this.ErrorCode == input.ErrorCode ||
                    (this.ErrorCode != null &&
                    this.ErrorCode.Equals(input.ErrorCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LongName != null)
                    hashCode = hashCode * 59 + this.LongName.GetHashCode();
                hashCode = hashCode * 59 + this.TotalAmount.GetHashCode();
                hashCode = hashCode * 59 + this.AvailableAmount.GetHashCode();
                hashCode = hashCode * 59 + this.MaximumWithdrawAmount.GetHashCode();
                hashCode = hashCode * 59 + this.WithdrawFeePercent.GetHashCode();
                hashCode = hashCode * 59 + this.WithdrawFee.GetHashCode();
                hashCode = hashCode * 59 + this.NeedDestinationTag.GetHashCode();
                if (this.DestinationTagName != null)
                    hashCode = hashCode * 59 + this.DestinationTagName.GetHashCode();
                hashCode = hashCode * 59 + this.WithdrawDisabled.GetHashCode();
                if (this.ErrorCode != null)
                    hashCode = hashCode * 59 + this.ErrorCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
