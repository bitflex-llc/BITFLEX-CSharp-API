/*
 * BITFLEX Public API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"> (optional)</param>
        /// <returns>bool</returns>
        bool OrdersCancelPost(string orderId = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"> (optional)</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> OrdersCancelPostWithHttpInfo(string orderId = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pairName"></param>
        /// <returns></returns>
        void OrdersPairNameGet(string pairName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pairName"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OrdersPairNameGetWithHttpInfo(string pairName);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount"> (optional)</param>
        /// <param name="price"> (optional)</param>
        /// <param name="tradeType"> (optional)</param>
        /// <param name="pairId"> (optional)</param>
        /// <param name="orderType"> (optional)</param>
        /// <param name="isMargin"> (optional)</param>
        /// <param name="leverage"> (optional)</param>
        /// <param name="initialAmount"> (optional)</param>
        /// <param name="initialPrice"> (optional)</param>
        /// <param name="stopLossPrice"> (optional)</param>
        /// <param name="takeProfitPrice"> (optional)</param>
        /// <returns>OrderCreateResult</returns>
        OrderCreateResult OrdersPost(double? amount = default(double?), double? price = default(double?), TradeType? tradeType = default(TradeType?), string pairId = default(string), OrderTypes? orderType = default(OrderTypes?), bool? isMargin = default(bool?), int? leverage = default(int?), double? initialAmount = default(double?), double? initialPrice = default(double?), double? stopLossPrice = default(double?), double? takeProfitPrice = default(double?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount"> (optional)</param>
        /// <param name="price"> (optional)</param>
        /// <param name="tradeType"> (optional)</param>
        /// <param name="pairId"> (optional)</param>
        /// <param name="orderType"> (optional)</param>
        /// <param name="isMargin"> (optional)</param>
        /// <param name="leverage"> (optional)</param>
        /// <param name="initialAmount"> (optional)</param>
        /// <param name="initialPrice"> (optional)</param>
        /// <param name="stopLossPrice"> (optional)</param>
        /// <param name="takeProfitPrice"> (optional)</param>
        /// <returns>ApiResponse of OrderCreateResult</returns>
        ApiResponse<OrderCreateResult> OrdersPostWithHttpInfo(double? amount = default(double?), double? price = default(double?), TradeType? tradeType = default(TradeType?), string pairId = default(string), OrderTypes? orderType = default(OrderTypes?), bool? isMargin = default(bool?), int? leverage = default(int?), double? initialAmount = default(double?), double? initialPrice = default(double?), double? stopLossPrice = default(double?), double? takeProfitPrice = default(double?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> OrdersCancelPostAsync(string orderId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> OrdersCancelPostWithHttpInfoAsync(string orderId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pairName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OrdersPairNameGetAsync(string pairName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pairName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OrdersPairNameGetWithHttpInfoAsync(string pairName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount"> (optional)</param>
        /// <param name="price"> (optional)</param>
        /// <param name="tradeType"> (optional)</param>
        /// <param name="pairId"> (optional)</param>
        /// <param name="orderType"> (optional)</param>
        /// <param name="isMargin"> (optional)</param>
        /// <param name="leverage"> (optional)</param>
        /// <param name="initialAmount"> (optional)</param>
        /// <param name="initialPrice"> (optional)</param>
        /// <param name="stopLossPrice"> (optional)</param>
        /// <param name="takeProfitPrice"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderCreateResult</returns>
        System.Threading.Tasks.Task<OrderCreateResult> OrdersPostAsync(double? amount = default(double?), double? price = default(double?), TradeType? tradeType = default(TradeType?), string pairId = default(string), OrderTypes? orderType = default(OrderTypes?), bool? isMargin = default(bool?), int? leverage = default(int?), double? initialAmount = default(double?), double? initialPrice = default(double?), double? stopLossPrice = default(double?), double? takeProfitPrice = default(double?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount"> (optional)</param>
        /// <param name="price"> (optional)</param>
        /// <param name="tradeType"> (optional)</param>
        /// <param name="pairId"> (optional)</param>
        /// <param name="orderType"> (optional)</param>
        /// <param name="isMargin"> (optional)</param>
        /// <param name="leverage"> (optional)</param>
        /// <param name="initialAmount"> (optional)</param>
        /// <param name="initialPrice"> (optional)</param>
        /// <param name="stopLossPrice"> (optional)</param>
        /// <param name="takeProfitPrice"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderCreateResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderCreateResult>> OrdersPostWithHttpInfoAsync(double? amount = default(double?), double? price = default(double?), TradeType? tradeType = default(TradeType?), string pairId = default(string), OrderTypes? orderType = default(OrderTypes?), bool? isMargin = default(bool?), int? leverage = default(int?), double? initialAmount = default(double?), double? initialPrice = default(double?), double? stopLossPrice = default(double?), double? takeProfitPrice = default(double?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersApi : IOrdersApiSync, IOrdersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrdersApi : IOrdersApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrdersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrdersApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrdersApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OrdersApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"> (optional)</param>
        /// <returns>bool</returns>
        public bool OrdersCancelPost(string orderId = default(string))
        {
            Org.OpenAPITools.Client.ApiResponse<bool> localVarResponse = OrdersCancelPostWithHttpInfo(orderId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"> (optional)</param>
        /// <returns>ApiResponse of bool</returns>
        public Org.OpenAPITools.Client.ApiResponse<bool> OrdersCancelPostWithHttpInfo(string orderId = default(string))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (orderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "orderId", orderId));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<bool>("/Orders/cancel", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrdersCancelPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> OrdersCancelPostAsync(string orderId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<bool> localVarResponse = await OrdersCancelPostWithHttpInfoAsync(orderId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<bool>> OrdersCancelPostWithHttpInfoAsync(string orderId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (orderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "orderId", orderId));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<bool>("/Orders/cancel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrdersCancelPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pairName"></param>
        /// <returns></returns>
        public void OrdersPairNameGet(string pairName)
        {
            OrdersPairNameGetWithHttpInfo(pairName);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pairName"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> OrdersPairNameGetWithHttpInfo(string pairName)
        {
            // verify the required parameter 'pairName' is set
            if (pairName == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'pairName' when calling OrdersApi->OrdersPairNameGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pairName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(pairName)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/Orders/{pairName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrdersPairNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pairName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OrdersPairNameGetAsync(string pairName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await OrdersPairNameGetWithHttpInfoAsync(pairName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pairName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> OrdersPairNameGetWithHttpInfoAsync(string pairName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'pairName' is set
            if (pairName == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'pairName' when calling OrdersApi->OrdersPairNameGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pairName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(pairName)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/Orders/{pairName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrdersPairNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount"> (optional)</param>
        /// <param name="price"> (optional)</param>
        /// <param name="tradeType"> (optional)</param>
        /// <param name="pairId"> (optional)</param>
        /// <param name="orderType"> (optional)</param>
        /// <param name="isMargin"> (optional)</param>
        /// <param name="leverage"> (optional)</param>
        /// <param name="initialAmount"> (optional)</param>
        /// <param name="initialPrice"> (optional)</param>
        /// <param name="stopLossPrice"> (optional)</param>
        /// <param name="takeProfitPrice"> (optional)</param>
        /// <returns>OrderCreateResult</returns>
        public OrderCreateResult OrdersPost(double? amount = default(double?), double? price = default(double?), TradeType? tradeType = default(TradeType?), string pairId = default(string), OrderTypes? orderType = default(OrderTypes?), bool? isMargin = default(bool?), int? leverage = default(int?), double? initialAmount = default(double?), double? initialPrice = default(double?), double? stopLossPrice = default(double?), double? takeProfitPrice = default(double?))
        {
            Org.OpenAPITools.Client.ApiResponse<OrderCreateResult> localVarResponse = OrdersPostWithHttpInfo(amount, price, tradeType, pairId, orderType, isMargin, leverage, initialAmount, initialPrice, stopLossPrice, takeProfitPrice);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount"> (optional)</param>
        /// <param name="price"> (optional)</param>
        /// <param name="tradeType"> (optional)</param>
        /// <param name="pairId"> (optional)</param>
        /// <param name="orderType"> (optional)</param>
        /// <param name="isMargin"> (optional)</param>
        /// <param name="leverage"> (optional)</param>
        /// <param name="initialAmount"> (optional)</param>
        /// <param name="initialPrice"> (optional)</param>
        /// <param name="stopLossPrice"> (optional)</param>
        /// <param name="takeProfitPrice"> (optional)</param>
        /// <returns>ApiResponse of OrderCreateResult</returns>
        public Org.OpenAPITools.Client.ApiResponse<OrderCreateResult> OrdersPostWithHttpInfo(double? amount = default(double?), double? price = default(double?), TradeType? tradeType = default(TradeType?), string pairId = default(string), OrderTypes? orderType = default(OrderTypes?), bool? isMargin = default(bool?), int? leverage = default(int?), double? initialAmount = default(double?), double? initialPrice = default(double?), double? stopLossPrice = default(double?), double? takeProfitPrice = default(double?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (amount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Amount", amount));
            }
            if (price != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Price", price));
            }
            if (tradeType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "TradeType", tradeType));
            }
            if (pairId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "PairId", pairId));
            }
            if (orderType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "OrderType", orderType));
            }
            if (isMargin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "IsMargin", isMargin));
            }
            if (leverage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Leverage", leverage));
            }
            if (initialAmount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "InitialAmount", initialAmount));
            }
            if (initialPrice != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "InitialPrice", initialPrice));
            }
            if (stopLossPrice != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "StopLossPrice", stopLossPrice));
            }
            if (takeProfitPrice != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "TakeProfitPrice", takeProfitPrice));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OrderCreateResult>("/Orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrdersPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount"> (optional)</param>
        /// <param name="price"> (optional)</param>
        /// <param name="tradeType"> (optional)</param>
        /// <param name="pairId"> (optional)</param>
        /// <param name="orderType"> (optional)</param>
        /// <param name="isMargin"> (optional)</param>
        /// <param name="leverage"> (optional)</param>
        /// <param name="initialAmount"> (optional)</param>
        /// <param name="initialPrice"> (optional)</param>
        /// <param name="stopLossPrice"> (optional)</param>
        /// <param name="takeProfitPrice"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderCreateResult</returns>
        public async System.Threading.Tasks.Task<OrderCreateResult> OrdersPostAsync(double? amount = default(double?), double? price = default(double?), TradeType? tradeType = default(TradeType?), string pairId = default(string), OrderTypes? orderType = default(OrderTypes?), bool? isMargin = default(bool?), int? leverage = default(int?), double? initialAmount = default(double?), double? initialPrice = default(double?), double? stopLossPrice = default(double?), double? takeProfitPrice = default(double?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OrderCreateResult> localVarResponse = await OrdersPostWithHttpInfoAsync(amount, price, tradeType, pairId, orderType, isMargin, leverage, initialAmount, initialPrice, stopLossPrice, takeProfitPrice, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount"> (optional)</param>
        /// <param name="price"> (optional)</param>
        /// <param name="tradeType"> (optional)</param>
        /// <param name="pairId"> (optional)</param>
        /// <param name="orderType"> (optional)</param>
        /// <param name="isMargin"> (optional)</param>
        /// <param name="leverage"> (optional)</param>
        /// <param name="initialAmount"> (optional)</param>
        /// <param name="initialPrice"> (optional)</param>
        /// <param name="stopLossPrice"> (optional)</param>
        /// <param name="takeProfitPrice"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderCreateResult)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OrderCreateResult>> OrdersPostWithHttpInfoAsync(double? amount = default(double?), double? price = default(double?), TradeType? tradeType = default(TradeType?), string pairId = default(string), OrderTypes? orderType = default(OrderTypes?), bool? isMargin = default(bool?), int? leverage = default(int?), double? initialAmount = default(double?), double? initialPrice = default(double?), double? stopLossPrice = default(double?), double? takeProfitPrice = default(double?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (amount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Amount", amount));
            }
            if (price != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Price", price));
            }
            if (tradeType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "TradeType", tradeType));
            }
            if (pairId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "PairId", pairId));
            }
            if (orderType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "OrderType", orderType));
            }
            if (isMargin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "IsMargin", isMargin));
            }
            if (leverage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Leverage", leverage));
            }
            if (initialAmount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "InitialAmount", initialAmount));
            }
            if (initialPrice != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "InitialPrice", initialPrice));
            }
            if (stopLossPrice != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "StopLossPrice", stopLossPrice));
            }
            if (takeProfitPrice != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "TakeProfitPrice", takeProfitPrice));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OrderCreateResult>("/Orders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrdersPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
