/*
 * BITFLEX Public API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISignApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoCurrencies"> (optional)</param>
        /// <param name="orders"> (optional)</param>
        /// <param name="depositAddresses"> (optional)</param>
        /// <param name="userBalances"> (optional)</param>
        /// <param name="markets"> (optional)</param>
        /// <param name="tradingPairs"> (optional)</param>
        /// <param name="transactions"> (optional)</param>
        /// <param name="withdrawRequests"> (optional)</param>
        /// <param name="manualWithdrawRequests"> (optional)</param>
        /// <param name="trades"> (optional)</param>
        /// <param name="quotes"> (optional)</param>
        /// <param name="smsVerificationMessages"> (optional)</param>
        /// <param name="tradingAmounts"> (optional)</param>
        /// <param name="rippleDestinationTags"> (optional)</param>
        /// <param name="bitcoinBasedCurrencies"> (optional)</param>
        /// <param name="eRC20Tokens"> (optional)</param>
        /// <param name="balanceActions"> (optional)</param>
        /// <param name="keysValues"> (optional)</param>
        /// <param name="applicationTokenAccesses"> (optional)</param>
        /// <param name="applicationQrCommands"> (optional)</param>
        /// <param name="pushTokens"> (optional)</param>
        /// <param name="healthChecks"> (optional)</param>
        /// <param name="userRoles"> (optional)</param>
        /// <param name="roles"> (optional)</param>
        /// <param name="roleClaims"> (optional)</param>
        /// <param name="users"> (optional)</param>
        /// <param name="userClaims"> (optional)</param>
        /// <param name="userLogins"> (optional)</param>
        /// <param name="userTokens"> (optional)</param>
        /// <param name="databaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="databaseCurrentTransactionSupportsSavepoints"> (optional)</param>
        /// <param name="databaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="databaseProviderName"> (optional)</param>
        /// <param name="changeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseCurrentTransactionSupportsSavepoints"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseProviderName"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerContext"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDebugViewLongView"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDebugViewShortView"> (optional)</param>
        /// <param name="changeTrackerContextModel"> (optional)</param>
        /// <param name="changeTrackerContextContextIdInstanceId"> (optional)</param>
        /// <param name="changeTrackerContextContextIdLease"> (optional)</param>
        /// <param name="changeTrackerDebugViewLongView"> (optional)</param>
        /// <param name="changeTrackerDebugViewShortView"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <param name="contextIdInstanceId"> (optional)</param>
        /// <param name="contextIdLease"> (optional)</param>
        /// <returns></returns>
        void ApiSignAffiliatedataPost(List<CryptoCurrency> cryptoCurrencies = default(List<CryptoCurrency>), List<Order> orders = default(List<Order>), List<DepositAddress> depositAddresses = default(List<DepositAddress>), List<Balance> userBalances = default(List<Balance>), List<Market> markets = default(List<Market>), List<TradingPair> tradingPairs = default(List<TradingPair>), List<Transaction> transactions = default(List<Transaction>), List<WithdrawRequest> withdrawRequests = default(List<WithdrawRequest>), List<ManualWithdrawRequest> manualWithdrawRequests = default(List<ManualWithdrawRequest>), List<Trade> trades = default(List<Trade>), List<Quote> quotes = default(List<Quote>), List<SmsVerificationMessage> smsVerificationMessages = default(List<SmsVerificationMessage>), List<TradingAmount> tradingAmounts = default(List<TradingAmount>), List<RippleDestinationTag> rippleDestinationTags = default(List<RippleDestinationTag>), List<BitcoinBasedCurrency> bitcoinBasedCurrencies = default(List<BitcoinBasedCurrency>), List<ERC20Token> eRC20Tokens = default(List<ERC20Token>), List<BalanceAction> balanceActions = default(List<BalanceAction>), List<KeyValue> keysValues = default(List<KeyValue>), List<IApplicationTokenAccess> applicationTokenAccesses = default(List<IApplicationTokenAccess>), List<IApplicationQrCommand> applicationQrCommands = default(List<IApplicationQrCommand>), List<PushToken> pushTokens = default(List<PushToken>), List<HealthCheck> healthChecks = default(List<HealthCheck>), List<StringIdentityUserRole> userRoles = default(List<StringIdentityUserRole>), List<IdentityRole> roles = default(List<IdentityRole>), List<StringIdentityRoleClaim> roleClaims = default(List<StringIdentityRoleClaim>), List<ApplicationUser> users = default(List<ApplicationUser>), List<StringIdentityUserClaim> userClaims = default(List<StringIdentityUserClaim>), List<StringIdentityUserLogin> userLogins = default(List<StringIdentityUserLogin>), List<StringIdentityUserToken> userTokens = default(List<StringIdentityUserToken>), Guid? databaseCurrentTransactionTransactionId = default(Guid?), bool? databaseCurrentTransactionSupportsSavepoints = default(bool?), bool? databaseAutoTransactionsEnabled = default(bool?), string databaseProviderName = default(string), bool? changeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerCascadeDeleteTiming = default(CascadeTiming?), Guid? changeTrackerContextDatabaseCurrentTransactionTransactionId = default(Guid?), bool? changeTrackerContextDatabaseCurrentTransactionSupportsSavepoints = default(bool?), bool? changeTrackerContextDatabaseAutoTransactionsEnabled = default(bool?), string changeTrackerContextDatabaseProviderName = default(string), bool? changeTrackerContextChangeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerContextChangeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerContextChangeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerContextChangeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerContextChangeTrackerCascadeDeleteTiming = default(CascadeTiming?), DbContext changeTrackerContextChangeTrackerContext = default(DbContext), string changeTrackerContextChangeTrackerDebugViewLongView = default(string), string changeTrackerContextChangeTrackerDebugViewShortView = default(string), Object changeTrackerContextModel = default(Object), Guid? changeTrackerContextContextIdInstanceId = default(Guid?), int? changeTrackerContextContextIdLease = default(int?), string changeTrackerDebugViewLongView = default(string), string changeTrackerDebugViewShortView = default(string), Object model = default(Object), Guid? contextIdInstanceId = default(Guid?), int? contextIdLease = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoCurrencies"> (optional)</param>
        /// <param name="orders"> (optional)</param>
        /// <param name="depositAddresses"> (optional)</param>
        /// <param name="userBalances"> (optional)</param>
        /// <param name="markets"> (optional)</param>
        /// <param name="tradingPairs"> (optional)</param>
        /// <param name="transactions"> (optional)</param>
        /// <param name="withdrawRequests"> (optional)</param>
        /// <param name="manualWithdrawRequests"> (optional)</param>
        /// <param name="trades"> (optional)</param>
        /// <param name="quotes"> (optional)</param>
        /// <param name="smsVerificationMessages"> (optional)</param>
        /// <param name="tradingAmounts"> (optional)</param>
        /// <param name="rippleDestinationTags"> (optional)</param>
        /// <param name="bitcoinBasedCurrencies"> (optional)</param>
        /// <param name="eRC20Tokens"> (optional)</param>
        /// <param name="balanceActions"> (optional)</param>
        /// <param name="keysValues"> (optional)</param>
        /// <param name="applicationTokenAccesses"> (optional)</param>
        /// <param name="applicationQrCommands"> (optional)</param>
        /// <param name="pushTokens"> (optional)</param>
        /// <param name="healthChecks"> (optional)</param>
        /// <param name="userRoles"> (optional)</param>
        /// <param name="roles"> (optional)</param>
        /// <param name="roleClaims"> (optional)</param>
        /// <param name="users"> (optional)</param>
        /// <param name="userClaims"> (optional)</param>
        /// <param name="userLogins"> (optional)</param>
        /// <param name="userTokens"> (optional)</param>
        /// <param name="databaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="databaseCurrentTransactionSupportsSavepoints"> (optional)</param>
        /// <param name="databaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="databaseProviderName"> (optional)</param>
        /// <param name="changeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseCurrentTransactionSupportsSavepoints"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseProviderName"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerContext"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDebugViewLongView"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDebugViewShortView"> (optional)</param>
        /// <param name="changeTrackerContextModel"> (optional)</param>
        /// <param name="changeTrackerContextContextIdInstanceId"> (optional)</param>
        /// <param name="changeTrackerContextContextIdLease"> (optional)</param>
        /// <param name="changeTrackerDebugViewLongView"> (optional)</param>
        /// <param name="changeTrackerDebugViewShortView"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <param name="contextIdInstanceId"> (optional)</param>
        /// <param name="contextIdLease"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiSignAffiliatedataPostWithHttpInfo(List<CryptoCurrency> cryptoCurrencies = default(List<CryptoCurrency>), List<Order> orders = default(List<Order>), List<DepositAddress> depositAddresses = default(List<DepositAddress>), List<Balance> userBalances = default(List<Balance>), List<Market> markets = default(List<Market>), List<TradingPair> tradingPairs = default(List<TradingPair>), List<Transaction> transactions = default(List<Transaction>), List<WithdrawRequest> withdrawRequests = default(List<WithdrawRequest>), List<ManualWithdrawRequest> manualWithdrawRequests = default(List<ManualWithdrawRequest>), List<Trade> trades = default(List<Trade>), List<Quote> quotes = default(List<Quote>), List<SmsVerificationMessage> smsVerificationMessages = default(List<SmsVerificationMessage>), List<TradingAmount> tradingAmounts = default(List<TradingAmount>), List<RippleDestinationTag> rippleDestinationTags = default(List<RippleDestinationTag>), List<BitcoinBasedCurrency> bitcoinBasedCurrencies = default(List<BitcoinBasedCurrency>), List<ERC20Token> eRC20Tokens = default(List<ERC20Token>), List<BalanceAction> balanceActions = default(List<BalanceAction>), List<KeyValue> keysValues = default(List<KeyValue>), List<IApplicationTokenAccess> applicationTokenAccesses = default(List<IApplicationTokenAccess>), List<IApplicationQrCommand> applicationQrCommands = default(List<IApplicationQrCommand>), List<PushToken> pushTokens = default(List<PushToken>), List<HealthCheck> healthChecks = default(List<HealthCheck>), List<StringIdentityUserRole> userRoles = default(List<StringIdentityUserRole>), List<IdentityRole> roles = default(List<IdentityRole>), List<StringIdentityRoleClaim> roleClaims = default(List<StringIdentityRoleClaim>), List<ApplicationUser> users = default(List<ApplicationUser>), List<StringIdentityUserClaim> userClaims = default(List<StringIdentityUserClaim>), List<StringIdentityUserLogin> userLogins = default(List<StringIdentityUserLogin>), List<StringIdentityUserToken> userTokens = default(List<StringIdentityUserToken>), Guid? databaseCurrentTransactionTransactionId = default(Guid?), bool? databaseCurrentTransactionSupportsSavepoints = default(bool?), bool? databaseAutoTransactionsEnabled = default(bool?), string databaseProviderName = default(string), bool? changeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerCascadeDeleteTiming = default(CascadeTiming?), Guid? changeTrackerContextDatabaseCurrentTransactionTransactionId = default(Guid?), bool? changeTrackerContextDatabaseCurrentTransactionSupportsSavepoints = default(bool?), bool? changeTrackerContextDatabaseAutoTransactionsEnabled = default(bool?), string changeTrackerContextDatabaseProviderName = default(string), bool? changeTrackerContextChangeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerContextChangeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerContextChangeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerContextChangeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerContextChangeTrackerCascadeDeleteTiming = default(CascadeTiming?), DbContext changeTrackerContextChangeTrackerContext = default(DbContext), string changeTrackerContextChangeTrackerDebugViewLongView = default(string), string changeTrackerContextChangeTrackerDebugViewShortView = default(string), Object changeTrackerContextModel = default(Object), Guid? changeTrackerContextContextIdInstanceId = default(Guid?), int? changeTrackerContextContextIdLease = default(int?), string changeTrackerDebugViewLongView = default(string), string changeTrackerDebugViewShortView = default(string), Object model = default(Object), Guid? contextIdInstanceId = default(Guid?), int? contextIdLease = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void ApiSignCheckIsMobileOnlinePost();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiSignCheckIsMobileOnlinePostWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postConfirmRequest"> (optional)</param>
        /// <returns>EmailConfirmationResult</returns>
        EmailConfirmationResult ApiSignConfirmemailPost(PostConfirmRequest postConfirmRequest = default(PostConfirmRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postConfirmRequest"> (optional)</param>
        /// <returns>ApiResponse of EmailConfirmationResult</returns>
        ApiResponse<EmailConfirmationResult> ApiSignConfirmemailPostWithHttpInfo(PostConfirmRequest postConfirmRequest = default(PostConfirmRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceName"> (optional)</param>
        /// <returns>bool</returns>
        bool ApiSignEnable2faPost(string deviceName = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceName"> (optional)</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> ApiSignEnable2faPostWithHttpInfo(string deviceName = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceName"> (optional)</param>
        /// <param name="ip"> (optional)</param>
        /// <returns>List&lt;MobileConfirmationRequest&gt;</returns>
        List<MobileConfirmationRequest> ApiSignGetRequestsGet(string deviceName = default(string), string ip = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceName"> (optional)</param>
        /// <param name="ip"> (optional)</param>
        /// <returns>ApiResponse of List&lt;MobileConfirmationRequest&gt;</returns>
        ApiResponse<List<MobileConfirmationRequest>> ApiSignGetRequestsGetWithHttpInfo(string deviceName = default(string), string ip = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postGetReferrerEmailRequest"> (optional)</param>
        /// <returns>PostGetReferrerEmailResponse</returns>
        PostGetReferrerEmailResponse ApiSignGetreferreremailPost(PostGetReferrerEmailRequest postGetReferrerEmailRequest = default(PostGetReferrerEmailRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postGetReferrerEmailRequest"> (optional)</param>
        /// <returns>ApiResponse of PostGetReferrerEmailResponse</returns>
        ApiResponse<PostGetReferrerEmailResponse> ApiSignGetreferreremailPostWithHttpInfo(PostGetReferrerEmailRequest postGetReferrerEmailRequest = default(PostGetReferrerEmailRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestType"> (optional)</param>
        /// <returns></returns>
        void ApiSignMobileConfirmationRequestPost(RequestType? requestType = default(RequestType?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestType"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiSignMobileConfirmationRequestPostWithHttpInfo(RequestType? requestType = default(RequestType?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postResetPasswordRequest"> (optional)</param>
        /// <returns>bool</returns>
        bool ApiSignResetpasswordPost(PostResetPasswordRequest postResetPasswordRequest = default(PostResetPasswordRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postResetPasswordRequest"> (optional)</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> ApiSignResetpasswordPostWithHttpInfo(PostResetPasswordRequest postResetPasswordRequest = default(PostResetPasswordRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postForgotPasswordRequest"> (optional)</param>
        /// <returns>bool</returns>
        bool ApiSignRestorepasswordPost(PostForgotPasswordRequest postForgotPasswordRequest = default(PostForgotPasswordRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postForgotPasswordRequest"> (optional)</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> ApiSignRestorepasswordPostWithHttpInfo(PostForgotPasswordRequest postForgotPasswordRequest = default(PostForgotPasswordRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSetAffiliateRequest"> (optional)</param>
        /// <returns></returns>
        void ApiSignSetAffiliatePost(PostSetAffiliateRequest postSetAffiliateRequest = default(PostSetAffiliateRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSetAffiliateRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiSignSetAffiliatePostWithHttpInfo(PostSetAffiliateRequest postSetAffiliateRequest = default(PostSetAffiliateRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSignInRequest"> (optional)</param>
        /// <returns>PostSignInResponse</returns>
        PostSignInResponse ApiSignSigninPost(PostSignInRequest postSignInRequest = default(PostSignInRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSignInRequest"> (optional)</param>
        /// <returns>ApiResponse of PostSignInResponse</returns>
        ApiResponse<PostSignInResponse> ApiSignSigninPostWithHttpInfo(PostSignInRequest postSignInRequest = default(PostSignInRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSignUpRequest"> (optional)</param>
        /// <returns>PostSignUpResponse</returns>
        PostSignUpResponse ApiSignSignupPost(PostSignUpRequest postSignUpRequest = default(PostSignUpRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSignUpRequest"> (optional)</param>
        /// <returns>ApiResponse of PostSignUpResponse</returns>
        ApiResponse<PostSignUpResponse> ApiSignSignupPostWithHttpInfo(PostSignUpRequest postSignUpRequest = default(PostSignUpRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISignApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoCurrencies"> (optional)</param>
        /// <param name="orders"> (optional)</param>
        /// <param name="depositAddresses"> (optional)</param>
        /// <param name="userBalances"> (optional)</param>
        /// <param name="markets"> (optional)</param>
        /// <param name="tradingPairs"> (optional)</param>
        /// <param name="transactions"> (optional)</param>
        /// <param name="withdrawRequests"> (optional)</param>
        /// <param name="manualWithdrawRequests"> (optional)</param>
        /// <param name="trades"> (optional)</param>
        /// <param name="quotes"> (optional)</param>
        /// <param name="smsVerificationMessages"> (optional)</param>
        /// <param name="tradingAmounts"> (optional)</param>
        /// <param name="rippleDestinationTags"> (optional)</param>
        /// <param name="bitcoinBasedCurrencies"> (optional)</param>
        /// <param name="eRC20Tokens"> (optional)</param>
        /// <param name="balanceActions"> (optional)</param>
        /// <param name="keysValues"> (optional)</param>
        /// <param name="applicationTokenAccesses"> (optional)</param>
        /// <param name="applicationQrCommands"> (optional)</param>
        /// <param name="pushTokens"> (optional)</param>
        /// <param name="healthChecks"> (optional)</param>
        /// <param name="userRoles"> (optional)</param>
        /// <param name="roles"> (optional)</param>
        /// <param name="roleClaims"> (optional)</param>
        /// <param name="users"> (optional)</param>
        /// <param name="userClaims"> (optional)</param>
        /// <param name="userLogins"> (optional)</param>
        /// <param name="userTokens"> (optional)</param>
        /// <param name="databaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="databaseCurrentTransactionSupportsSavepoints"> (optional)</param>
        /// <param name="databaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="databaseProviderName"> (optional)</param>
        /// <param name="changeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseCurrentTransactionSupportsSavepoints"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseProviderName"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerContext"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDebugViewLongView"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDebugViewShortView"> (optional)</param>
        /// <param name="changeTrackerContextModel"> (optional)</param>
        /// <param name="changeTrackerContextContextIdInstanceId"> (optional)</param>
        /// <param name="changeTrackerContextContextIdLease"> (optional)</param>
        /// <param name="changeTrackerDebugViewLongView"> (optional)</param>
        /// <param name="changeTrackerDebugViewShortView"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <param name="contextIdInstanceId"> (optional)</param>
        /// <param name="contextIdLease"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiSignAffiliatedataPostAsync(List<CryptoCurrency> cryptoCurrencies = default(List<CryptoCurrency>), List<Order> orders = default(List<Order>), List<DepositAddress> depositAddresses = default(List<DepositAddress>), List<Balance> userBalances = default(List<Balance>), List<Market> markets = default(List<Market>), List<TradingPair> tradingPairs = default(List<TradingPair>), List<Transaction> transactions = default(List<Transaction>), List<WithdrawRequest> withdrawRequests = default(List<WithdrawRequest>), List<ManualWithdrawRequest> manualWithdrawRequests = default(List<ManualWithdrawRequest>), List<Trade> trades = default(List<Trade>), List<Quote> quotes = default(List<Quote>), List<SmsVerificationMessage> smsVerificationMessages = default(List<SmsVerificationMessage>), List<TradingAmount> tradingAmounts = default(List<TradingAmount>), List<RippleDestinationTag> rippleDestinationTags = default(List<RippleDestinationTag>), List<BitcoinBasedCurrency> bitcoinBasedCurrencies = default(List<BitcoinBasedCurrency>), List<ERC20Token> eRC20Tokens = default(List<ERC20Token>), List<BalanceAction> balanceActions = default(List<BalanceAction>), List<KeyValue> keysValues = default(List<KeyValue>), List<IApplicationTokenAccess> applicationTokenAccesses = default(List<IApplicationTokenAccess>), List<IApplicationQrCommand> applicationQrCommands = default(List<IApplicationQrCommand>), List<PushToken> pushTokens = default(List<PushToken>), List<HealthCheck> healthChecks = default(List<HealthCheck>), List<StringIdentityUserRole> userRoles = default(List<StringIdentityUserRole>), List<IdentityRole> roles = default(List<IdentityRole>), List<StringIdentityRoleClaim> roleClaims = default(List<StringIdentityRoleClaim>), List<ApplicationUser> users = default(List<ApplicationUser>), List<StringIdentityUserClaim> userClaims = default(List<StringIdentityUserClaim>), List<StringIdentityUserLogin> userLogins = default(List<StringIdentityUserLogin>), List<StringIdentityUserToken> userTokens = default(List<StringIdentityUserToken>), Guid? databaseCurrentTransactionTransactionId = default(Guid?), bool? databaseCurrentTransactionSupportsSavepoints = default(bool?), bool? databaseAutoTransactionsEnabled = default(bool?), string databaseProviderName = default(string), bool? changeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerCascadeDeleteTiming = default(CascadeTiming?), Guid? changeTrackerContextDatabaseCurrentTransactionTransactionId = default(Guid?), bool? changeTrackerContextDatabaseCurrentTransactionSupportsSavepoints = default(bool?), bool? changeTrackerContextDatabaseAutoTransactionsEnabled = default(bool?), string changeTrackerContextDatabaseProviderName = default(string), bool? changeTrackerContextChangeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerContextChangeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerContextChangeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerContextChangeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerContextChangeTrackerCascadeDeleteTiming = default(CascadeTiming?), DbContext changeTrackerContextChangeTrackerContext = default(DbContext), string changeTrackerContextChangeTrackerDebugViewLongView = default(string), string changeTrackerContextChangeTrackerDebugViewShortView = default(string), Object changeTrackerContextModel = default(Object), Guid? changeTrackerContextContextIdInstanceId = default(Guid?), int? changeTrackerContextContextIdLease = default(int?), string changeTrackerDebugViewLongView = default(string), string changeTrackerDebugViewShortView = default(string), Object model = default(Object), Guid? contextIdInstanceId = default(Guid?), int? contextIdLease = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoCurrencies"> (optional)</param>
        /// <param name="orders"> (optional)</param>
        /// <param name="depositAddresses"> (optional)</param>
        /// <param name="userBalances"> (optional)</param>
        /// <param name="markets"> (optional)</param>
        /// <param name="tradingPairs"> (optional)</param>
        /// <param name="transactions"> (optional)</param>
        /// <param name="withdrawRequests"> (optional)</param>
        /// <param name="manualWithdrawRequests"> (optional)</param>
        /// <param name="trades"> (optional)</param>
        /// <param name="quotes"> (optional)</param>
        /// <param name="smsVerificationMessages"> (optional)</param>
        /// <param name="tradingAmounts"> (optional)</param>
        /// <param name="rippleDestinationTags"> (optional)</param>
        /// <param name="bitcoinBasedCurrencies"> (optional)</param>
        /// <param name="eRC20Tokens"> (optional)</param>
        /// <param name="balanceActions"> (optional)</param>
        /// <param name="keysValues"> (optional)</param>
        /// <param name="applicationTokenAccesses"> (optional)</param>
        /// <param name="applicationQrCommands"> (optional)</param>
        /// <param name="pushTokens"> (optional)</param>
        /// <param name="healthChecks"> (optional)</param>
        /// <param name="userRoles"> (optional)</param>
        /// <param name="roles"> (optional)</param>
        /// <param name="roleClaims"> (optional)</param>
        /// <param name="users"> (optional)</param>
        /// <param name="userClaims"> (optional)</param>
        /// <param name="userLogins"> (optional)</param>
        /// <param name="userTokens"> (optional)</param>
        /// <param name="databaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="databaseCurrentTransactionSupportsSavepoints"> (optional)</param>
        /// <param name="databaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="databaseProviderName"> (optional)</param>
        /// <param name="changeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseCurrentTransactionSupportsSavepoints"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseProviderName"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerContext"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDebugViewLongView"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDebugViewShortView"> (optional)</param>
        /// <param name="changeTrackerContextModel"> (optional)</param>
        /// <param name="changeTrackerContextContextIdInstanceId"> (optional)</param>
        /// <param name="changeTrackerContextContextIdLease"> (optional)</param>
        /// <param name="changeTrackerDebugViewLongView"> (optional)</param>
        /// <param name="changeTrackerDebugViewShortView"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <param name="contextIdInstanceId"> (optional)</param>
        /// <param name="contextIdLease"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSignAffiliatedataPostWithHttpInfoAsync(List<CryptoCurrency> cryptoCurrencies = default(List<CryptoCurrency>), List<Order> orders = default(List<Order>), List<DepositAddress> depositAddresses = default(List<DepositAddress>), List<Balance> userBalances = default(List<Balance>), List<Market> markets = default(List<Market>), List<TradingPair> tradingPairs = default(List<TradingPair>), List<Transaction> transactions = default(List<Transaction>), List<WithdrawRequest> withdrawRequests = default(List<WithdrawRequest>), List<ManualWithdrawRequest> manualWithdrawRequests = default(List<ManualWithdrawRequest>), List<Trade> trades = default(List<Trade>), List<Quote> quotes = default(List<Quote>), List<SmsVerificationMessage> smsVerificationMessages = default(List<SmsVerificationMessage>), List<TradingAmount> tradingAmounts = default(List<TradingAmount>), List<RippleDestinationTag> rippleDestinationTags = default(List<RippleDestinationTag>), List<BitcoinBasedCurrency> bitcoinBasedCurrencies = default(List<BitcoinBasedCurrency>), List<ERC20Token> eRC20Tokens = default(List<ERC20Token>), List<BalanceAction> balanceActions = default(List<BalanceAction>), List<KeyValue> keysValues = default(List<KeyValue>), List<IApplicationTokenAccess> applicationTokenAccesses = default(List<IApplicationTokenAccess>), List<IApplicationQrCommand> applicationQrCommands = default(List<IApplicationQrCommand>), List<PushToken> pushTokens = default(List<PushToken>), List<HealthCheck> healthChecks = default(List<HealthCheck>), List<StringIdentityUserRole> userRoles = default(List<StringIdentityUserRole>), List<IdentityRole> roles = default(List<IdentityRole>), List<StringIdentityRoleClaim> roleClaims = default(List<StringIdentityRoleClaim>), List<ApplicationUser> users = default(List<ApplicationUser>), List<StringIdentityUserClaim> userClaims = default(List<StringIdentityUserClaim>), List<StringIdentityUserLogin> userLogins = default(List<StringIdentityUserLogin>), List<StringIdentityUserToken> userTokens = default(List<StringIdentityUserToken>), Guid? databaseCurrentTransactionTransactionId = default(Guid?), bool? databaseCurrentTransactionSupportsSavepoints = default(bool?), bool? databaseAutoTransactionsEnabled = default(bool?), string databaseProviderName = default(string), bool? changeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerCascadeDeleteTiming = default(CascadeTiming?), Guid? changeTrackerContextDatabaseCurrentTransactionTransactionId = default(Guid?), bool? changeTrackerContextDatabaseCurrentTransactionSupportsSavepoints = default(bool?), bool? changeTrackerContextDatabaseAutoTransactionsEnabled = default(bool?), string changeTrackerContextDatabaseProviderName = default(string), bool? changeTrackerContextChangeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerContextChangeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerContextChangeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerContextChangeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerContextChangeTrackerCascadeDeleteTiming = default(CascadeTiming?), DbContext changeTrackerContextChangeTrackerContext = default(DbContext), string changeTrackerContextChangeTrackerDebugViewLongView = default(string), string changeTrackerContextChangeTrackerDebugViewShortView = default(string), Object changeTrackerContextModel = default(Object), Guid? changeTrackerContextContextIdInstanceId = default(Guid?), int? changeTrackerContextContextIdLease = default(int?), string changeTrackerDebugViewLongView = default(string), string changeTrackerDebugViewShortView = default(string), Object model = default(Object), Guid? contextIdInstanceId = default(Guid?), int? contextIdLease = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiSignCheckIsMobileOnlinePostAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSignCheckIsMobileOnlinePostWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postConfirmRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailConfirmationResult</returns>
        System.Threading.Tasks.Task<EmailConfirmationResult> ApiSignConfirmemailPostAsync(PostConfirmRequest postConfirmRequest = default(PostConfirmRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postConfirmRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailConfirmationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailConfirmationResult>> ApiSignConfirmemailPostWithHttpInfoAsync(PostConfirmRequest postConfirmRequest = default(PostConfirmRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> ApiSignEnable2faPostAsync(string deviceName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> ApiSignEnable2faPostWithHttpInfoAsync(string deviceName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceName"> (optional)</param>
        /// <param name="ip"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MobileConfirmationRequest&gt;</returns>
        System.Threading.Tasks.Task<List<MobileConfirmationRequest>> ApiSignGetRequestsGetAsync(string deviceName = default(string), string ip = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceName"> (optional)</param>
        /// <param name="ip"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MobileConfirmationRequest&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MobileConfirmationRequest>>> ApiSignGetRequestsGetWithHttpInfoAsync(string deviceName = default(string), string ip = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postGetReferrerEmailRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostGetReferrerEmailResponse</returns>
        System.Threading.Tasks.Task<PostGetReferrerEmailResponse> ApiSignGetreferreremailPostAsync(PostGetReferrerEmailRequest postGetReferrerEmailRequest = default(PostGetReferrerEmailRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postGetReferrerEmailRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostGetReferrerEmailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostGetReferrerEmailResponse>> ApiSignGetreferreremailPostWithHttpInfoAsync(PostGetReferrerEmailRequest postGetReferrerEmailRequest = default(PostGetReferrerEmailRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestType"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiSignMobileConfirmationRequestPostAsync(RequestType? requestType = default(RequestType?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestType"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSignMobileConfirmationRequestPostWithHttpInfoAsync(RequestType? requestType = default(RequestType?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postResetPasswordRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> ApiSignResetpasswordPostAsync(PostResetPasswordRequest postResetPasswordRequest = default(PostResetPasswordRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postResetPasswordRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> ApiSignResetpasswordPostWithHttpInfoAsync(PostResetPasswordRequest postResetPasswordRequest = default(PostResetPasswordRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postForgotPasswordRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> ApiSignRestorepasswordPostAsync(PostForgotPasswordRequest postForgotPasswordRequest = default(PostForgotPasswordRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postForgotPasswordRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> ApiSignRestorepasswordPostWithHttpInfoAsync(PostForgotPasswordRequest postForgotPasswordRequest = default(PostForgotPasswordRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSetAffiliateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiSignSetAffiliatePostAsync(PostSetAffiliateRequest postSetAffiliateRequest = default(PostSetAffiliateRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSetAffiliateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSignSetAffiliatePostWithHttpInfoAsync(PostSetAffiliateRequest postSetAffiliateRequest = default(PostSetAffiliateRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSignInRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostSignInResponse</returns>
        System.Threading.Tasks.Task<PostSignInResponse> ApiSignSigninPostAsync(PostSignInRequest postSignInRequest = default(PostSignInRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSignInRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostSignInResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostSignInResponse>> ApiSignSigninPostWithHttpInfoAsync(PostSignInRequest postSignInRequest = default(PostSignInRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSignUpRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostSignUpResponse</returns>
        System.Threading.Tasks.Task<PostSignUpResponse> ApiSignSignupPostAsync(PostSignUpRequest postSignUpRequest = default(PostSignUpRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSignUpRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostSignUpResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostSignUpResponse>> ApiSignSignupPostWithHttpInfoAsync(PostSignUpRequest postSignUpRequest = default(PostSignUpRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISignApi : ISignApiSync, ISignApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SignApi : ISignApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SignApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SignApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SignApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SignApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SignApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SignApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SignApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SignApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoCurrencies"> (optional)</param>
        /// <param name="orders"> (optional)</param>
        /// <param name="depositAddresses"> (optional)</param>
        /// <param name="userBalances"> (optional)</param>
        /// <param name="markets"> (optional)</param>
        /// <param name="tradingPairs"> (optional)</param>
        /// <param name="transactions"> (optional)</param>
        /// <param name="withdrawRequests"> (optional)</param>
        /// <param name="manualWithdrawRequests"> (optional)</param>
        /// <param name="trades"> (optional)</param>
        /// <param name="quotes"> (optional)</param>
        /// <param name="smsVerificationMessages"> (optional)</param>
        /// <param name="tradingAmounts"> (optional)</param>
        /// <param name="rippleDestinationTags"> (optional)</param>
        /// <param name="bitcoinBasedCurrencies"> (optional)</param>
        /// <param name="eRC20Tokens"> (optional)</param>
        /// <param name="balanceActions"> (optional)</param>
        /// <param name="keysValues"> (optional)</param>
        /// <param name="applicationTokenAccesses"> (optional)</param>
        /// <param name="applicationQrCommands"> (optional)</param>
        /// <param name="pushTokens"> (optional)</param>
        /// <param name="healthChecks"> (optional)</param>
        /// <param name="userRoles"> (optional)</param>
        /// <param name="roles"> (optional)</param>
        /// <param name="roleClaims"> (optional)</param>
        /// <param name="users"> (optional)</param>
        /// <param name="userClaims"> (optional)</param>
        /// <param name="userLogins"> (optional)</param>
        /// <param name="userTokens"> (optional)</param>
        /// <param name="databaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="databaseCurrentTransactionSupportsSavepoints"> (optional)</param>
        /// <param name="databaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="databaseProviderName"> (optional)</param>
        /// <param name="changeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseCurrentTransactionSupportsSavepoints"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseProviderName"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerContext"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDebugViewLongView"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDebugViewShortView"> (optional)</param>
        /// <param name="changeTrackerContextModel"> (optional)</param>
        /// <param name="changeTrackerContextContextIdInstanceId"> (optional)</param>
        /// <param name="changeTrackerContextContextIdLease"> (optional)</param>
        /// <param name="changeTrackerDebugViewLongView"> (optional)</param>
        /// <param name="changeTrackerDebugViewShortView"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <param name="contextIdInstanceId"> (optional)</param>
        /// <param name="contextIdLease"> (optional)</param>
        /// <returns></returns>
        public void ApiSignAffiliatedataPost(List<CryptoCurrency> cryptoCurrencies = default(List<CryptoCurrency>), List<Order> orders = default(List<Order>), List<DepositAddress> depositAddresses = default(List<DepositAddress>), List<Balance> userBalances = default(List<Balance>), List<Market> markets = default(List<Market>), List<TradingPair> tradingPairs = default(List<TradingPair>), List<Transaction> transactions = default(List<Transaction>), List<WithdrawRequest> withdrawRequests = default(List<WithdrawRequest>), List<ManualWithdrawRequest> manualWithdrawRequests = default(List<ManualWithdrawRequest>), List<Trade> trades = default(List<Trade>), List<Quote> quotes = default(List<Quote>), List<SmsVerificationMessage> smsVerificationMessages = default(List<SmsVerificationMessage>), List<TradingAmount> tradingAmounts = default(List<TradingAmount>), List<RippleDestinationTag> rippleDestinationTags = default(List<RippleDestinationTag>), List<BitcoinBasedCurrency> bitcoinBasedCurrencies = default(List<BitcoinBasedCurrency>), List<ERC20Token> eRC20Tokens = default(List<ERC20Token>), List<BalanceAction> balanceActions = default(List<BalanceAction>), List<KeyValue> keysValues = default(List<KeyValue>), List<IApplicationTokenAccess> applicationTokenAccesses = default(List<IApplicationTokenAccess>), List<IApplicationQrCommand> applicationQrCommands = default(List<IApplicationQrCommand>), List<PushToken> pushTokens = default(List<PushToken>), List<HealthCheck> healthChecks = default(List<HealthCheck>), List<StringIdentityUserRole> userRoles = default(List<StringIdentityUserRole>), List<IdentityRole> roles = default(List<IdentityRole>), List<StringIdentityRoleClaim> roleClaims = default(List<StringIdentityRoleClaim>), List<ApplicationUser> users = default(List<ApplicationUser>), List<StringIdentityUserClaim> userClaims = default(List<StringIdentityUserClaim>), List<StringIdentityUserLogin> userLogins = default(List<StringIdentityUserLogin>), List<StringIdentityUserToken> userTokens = default(List<StringIdentityUserToken>), Guid? databaseCurrentTransactionTransactionId = default(Guid?), bool? databaseCurrentTransactionSupportsSavepoints = default(bool?), bool? databaseAutoTransactionsEnabled = default(bool?), string databaseProviderName = default(string), bool? changeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerCascadeDeleteTiming = default(CascadeTiming?), Guid? changeTrackerContextDatabaseCurrentTransactionTransactionId = default(Guid?), bool? changeTrackerContextDatabaseCurrentTransactionSupportsSavepoints = default(bool?), bool? changeTrackerContextDatabaseAutoTransactionsEnabled = default(bool?), string changeTrackerContextDatabaseProviderName = default(string), bool? changeTrackerContextChangeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerContextChangeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerContextChangeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerContextChangeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerContextChangeTrackerCascadeDeleteTiming = default(CascadeTiming?), DbContext changeTrackerContextChangeTrackerContext = default(DbContext), string changeTrackerContextChangeTrackerDebugViewLongView = default(string), string changeTrackerContextChangeTrackerDebugViewShortView = default(string), Object changeTrackerContextModel = default(Object), Guid? changeTrackerContextContextIdInstanceId = default(Guid?), int? changeTrackerContextContextIdLease = default(int?), string changeTrackerDebugViewLongView = default(string), string changeTrackerDebugViewShortView = default(string), Object model = default(Object), Guid? contextIdInstanceId = default(Guid?), int? contextIdLease = default(int?))
        {
            ApiSignAffiliatedataPostWithHttpInfo(cryptoCurrencies, orders, depositAddresses, userBalances, markets, tradingPairs, transactions, withdrawRequests, manualWithdrawRequests, trades, quotes, smsVerificationMessages, tradingAmounts, rippleDestinationTags, bitcoinBasedCurrencies, eRC20Tokens, balanceActions, keysValues, applicationTokenAccesses, applicationQrCommands, pushTokens, healthChecks, userRoles, roles, roleClaims, users, userClaims, userLogins, userTokens, databaseCurrentTransactionTransactionId, databaseCurrentTransactionSupportsSavepoints, databaseAutoTransactionsEnabled, databaseProviderName, changeTrackerAutoDetectChangesEnabled, changeTrackerLazyLoadingEnabled, changeTrackerQueryTrackingBehavior, changeTrackerDeleteOrphansTiming, changeTrackerCascadeDeleteTiming, changeTrackerContextDatabaseCurrentTransactionTransactionId, changeTrackerContextDatabaseCurrentTransactionSupportsSavepoints, changeTrackerContextDatabaseAutoTransactionsEnabled, changeTrackerContextDatabaseProviderName, changeTrackerContextChangeTrackerAutoDetectChangesEnabled, changeTrackerContextChangeTrackerLazyLoadingEnabled, changeTrackerContextChangeTrackerQueryTrackingBehavior, changeTrackerContextChangeTrackerDeleteOrphansTiming, changeTrackerContextChangeTrackerCascadeDeleteTiming, changeTrackerContextChangeTrackerContext, changeTrackerContextChangeTrackerDebugViewLongView, changeTrackerContextChangeTrackerDebugViewShortView, changeTrackerContextModel, changeTrackerContextContextIdInstanceId, changeTrackerContextContextIdLease, changeTrackerDebugViewLongView, changeTrackerDebugViewShortView, model, contextIdInstanceId, contextIdLease);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoCurrencies"> (optional)</param>
        /// <param name="orders"> (optional)</param>
        /// <param name="depositAddresses"> (optional)</param>
        /// <param name="userBalances"> (optional)</param>
        /// <param name="markets"> (optional)</param>
        /// <param name="tradingPairs"> (optional)</param>
        /// <param name="transactions"> (optional)</param>
        /// <param name="withdrawRequests"> (optional)</param>
        /// <param name="manualWithdrawRequests"> (optional)</param>
        /// <param name="trades"> (optional)</param>
        /// <param name="quotes"> (optional)</param>
        /// <param name="smsVerificationMessages"> (optional)</param>
        /// <param name="tradingAmounts"> (optional)</param>
        /// <param name="rippleDestinationTags"> (optional)</param>
        /// <param name="bitcoinBasedCurrencies"> (optional)</param>
        /// <param name="eRC20Tokens"> (optional)</param>
        /// <param name="balanceActions"> (optional)</param>
        /// <param name="keysValues"> (optional)</param>
        /// <param name="applicationTokenAccesses"> (optional)</param>
        /// <param name="applicationQrCommands"> (optional)</param>
        /// <param name="pushTokens"> (optional)</param>
        /// <param name="healthChecks"> (optional)</param>
        /// <param name="userRoles"> (optional)</param>
        /// <param name="roles"> (optional)</param>
        /// <param name="roleClaims"> (optional)</param>
        /// <param name="users"> (optional)</param>
        /// <param name="userClaims"> (optional)</param>
        /// <param name="userLogins"> (optional)</param>
        /// <param name="userTokens"> (optional)</param>
        /// <param name="databaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="databaseCurrentTransactionSupportsSavepoints"> (optional)</param>
        /// <param name="databaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="databaseProviderName"> (optional)</param>
        /// <param name="changeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseCurrentTransactionSupportsSavepoints"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseProviderName"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerContext"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDebugViewLongView"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDebugViewShortView"> (optional)</param>
        /// <param name="changeTrackerContextModel"> (optional)</param>
        /// <param name="changeTrackerContextContextIdInstanceId"> (optional)</param>
        /// <param name="changeTrackerContextContextIdLease"> (optional)</param>
        /// <param name="changeTrackerDebugViewLongView"> (optional)</param>
        /// <param name="changeTrackerDebugViewShortView"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <param name="contextIdInstanceId"> (optional)</param>
        /// <param name="contextIdLease"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> ApiSignAffiliatedataPostWithHttpInfo(List<CryptoCurrency> cryptoCurrencies = default(List<CryptoCurrency>), List<Order> orders = default(List<Order>), List<DepositAddress> depositAddresses = default(List<DepositAddress>), List<Balance> userBalances = default(List<Balance>), List<Market> markets = default(List<Market>), List<TradingPair> tradingPairs = default(List<TradingPair>), List<Transaction> transactions = default(List<Transaction>), List<WithdrawRequest> withdrawRequests = default(List<WithdrawRequest>), List<ManualWithdrawRequest> manualWithdrawRequests = default(List<ManualWithdrawRequest>), List<Trade> trades = default(List<Trade>), List<Quote> quotes = default(List<Quote>), List<SmsVerificationMessage> smsVerificationMessages = default(List<SmsVerificationMessage>), List<TradingAmount> tradingAmounts = default(List<TradingAmount>), List<RippleDestinationTag> rippleDestinationTags = default(List<RippleDestinationTag>), List<BitcoinBasedCurrency> bitcoinBasedCurrencies = default(List<BitcoinBasedCurrency>), List<ERC20Token> eRC20Tokens = default(List<ERC20Token>), List<BalanceAction> balanceActions = default(List<BalanceAction>), List<KeyValue> keysValues = default(List<KeyValue>), List<IApplicationTokenAccess> applicationTokenAccesses = default(List<IApplicationTokenAccess>), List<IApplicationQrCommand> applicationQrCommands = default(List<IApplicationQrCommand>), List<PushToken> pushTokens = default(List<PushToken>), List<HealthCheck> healthChecks = default(List<HealthCheck>), List<StringIdentityUserRole> userRoles = default(List<StringIdentityUserRole>), List<IdentityRole> roles = default(List<IdentityRole>), List<StringIdentityRoleClaim> roleClaims = default(List<StringIdentityRoleClaim>), List<ApplicationUser> users = default(List<ApplicationUser>), List<StringIdentityUserClaim> userClaims = default(List<StringIdentityUserClaim>), List<StringIdentityUserLogin> userLogins = default(List<StringIdentityUserLogin>), List<StringIdentityUserToken> userTokens = default(List<StringIdentityUserToken>), Guid? databaseCurrentTransactionTransactionId = default(Guid?), bool? databaseCurrentTransactionSupportsSavepoints = default(bool?), bool? databaseAutoTransactionsEnabled = default(bool?), string databaseProviderName = default(string), bool? changeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerCascadeDeleteTiming = default(CascadeTiming?), Guid? changeTrackerContextDatabaseCurrentTransactionTransactionId = default(Guid?), bool? changeTrackerContextDatabaseCurrentTransactionSupportsSavepoints = default(bool?), bool? changeTrackerContextDatabaseAutoTransactionsEnabled = default(bool?), string changeTrackerContextDatabaseProviderName = default(string), bool? changeTrackerContextChangeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerContextChangeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerContextChangeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerContextChangeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerContextChangeTrackerCascadeDeleteTiming = default(CascadeTiming?), DbContext changeTrackerContextChangeTrackerContext = default(DbContext), string changeTrackerContextChangeTrackerDebugViewLongView = default(string), string changeTrackerContextChangeTrackerDebugViewShortView = default(string), Object changeTrackerContextModel = default(Object), Guid? changeTrackerContextContextIdInstanceId = default(Guid?), int? changeTrackerContextContextIdLease = default(int?), string changeTrackerDebugViewLongView = default(string), string changeTrackerDebugViewShortView = default(string), Object model = default(Object), Guid? contextIdInstanceId = default(Guid?), int? contextIdLease = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cryptoCurrencies != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "CryptoCurrencies", cryptoCurrencies));
            }
            if (orders != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Orders", orders));
            }
            if (depositAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "DepositAddresses", depositAddresses));
            }
            if (userBalances != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "UserBalances", userBalances));
            }
            if (markets != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Markets", markets));
            }
            if (tradingPairs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "TradingPairs", tradingPairs));
            }
            if (transactions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Transactions", transactions));
            }
            if (withdrawRequests != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "WithdrawRequests", withdrawRequests));
            }
            if (manualWithdrawRequests != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "ManualWithdrawRequests", manualWithdrawRequests));
            }
            if (trades != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Trades", trades));
            }
            if (quotes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Quotes", quotes));
            }
            if (smsVerificationMessages != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "SmsVerificationMessages", smsVerificationMessages));
            }
            if (tradingAmounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "TradingAmounts", tradingAmounts));
            }
            if (rippleDestinationTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "RippleDestinationTags", rippleDestinationTags));
            }
            if (bitcoinBasedCurrencies != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "BitcoinBasedCurrencies", bitcoinBasedCurrencies));
            }
            if (eRC20Tokens != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "ERC20Tokens", eRC20Tokens));
            }
            if (balanceActions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "BalanceActions", balanceActions));
            }
            if (keysValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "KeysValues", keysValues));
            }
            if (applicationTokenAccesses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "ApplicationTokenAccesses", applicationTokenAccesses));
            }
            if (applicationQrCommands != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "ApplicationQrCommands", applicationQrCommands));
            }
            if (pushTokens != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "PushTokens", pushTokens));
            }
            if (healthChecks != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "HealthChecks", healthChecks));
            }
            if (userRoles != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "UserRoles", userRoles));
            }
            if (roles != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Roles", roles));
            }
            if (roleClaims != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "RoleClaims", roleClaims));
            }
            if (users != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Users", users));
            }
            if (userClaims != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "UserClaims", userClaims));
            }
            if (userLogins != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "UserLogins", userLogins));
            }
            if (userTokens != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "UserTokens", userTokens));
            }
            if (databaseCurrentTransactionTransactionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Database.CurrentTransaction.TransactionId", databaseCurrentTransactionTransactionId));
            }
            if (databaseCurrentTransactionSupportsSavepoints != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Database.CurrentTransaction.SupportsSavepoints", databaseCurrentTransactionSupportsSavepoints));
            }
            if (databaseAutoTransactionsEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Database.AutoTransactionsEnabled", databaseAutoTransactionsEnabled));
            }
            if (databaseProviderName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Database.ProviderName", databaseProviderName));
            }
            if (changeTrackerAutoDetectChangesEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.AutoDetectChangesEnabled", changeTrackerAutoDetectChangesEnabled));
            }
            if (changeTrackerLazyLoadingEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.LazyLoadingEnabled", changeTrackerLazyLoadingEnabled));
            }
            if (changeTrackerQueryTrackingBehavior != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.QueryTrackingBehavior", changeTrackerQueryTrackingBehavior));
            }
            if (changeTrackerDeleteOrphansTiming != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.DeleteOrphansTiming", changeTrackerDeleteOrphansTiming));
            }
            if (changeTrackerCascadeDeleteTiming != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.CascadeDeleteTiming", changeTrackerCascadeDeleteTiming));
            }
            if (changeTrackerContextDatabaseCurrentTransactionTransactionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.Database.CurrentTransaction.TransactionId", changeTrackerContextDatabaseCurrentTransactionTransactionId));
            }
            if (changeTrackerContextDatabaseCurrentTransactionSupportsSavepoints != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.Database.CurrentTransaction.SupportsSavepoints", changeTrackerContextDatabaseCurrentTransactionSupportsSavepoints));
            }
            if (changeTrackerContextDatabaseAutoTransactionsEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.Database.AutoTransactionsEnabled", changeTrackerContextDatabaseAutoTransactionsEnabled));
            }
            if (changeTrackerContextDatabaseProviderName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.Database.ProviderName", changeTrackerContextDatabaseProviderName));
            }
            if (changeTrackerContextChangeTrackerAutoDetectChangesEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.AutoDetectChangesEnabled", changeTrackerContextChangeTrackerAutoDetectChangesEnabled));
            }
            if (changeTrackerContextChangeTrackerLazyLoadingEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.LazyLoadingEnabled", changeTrackerContextChangeTrackerLazyLoadingEnabled));
            }
            if (changeTrackerContextChangeTrackerQueryTrackingBehavior != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.QueryTrackingBehavior", changeTrackerContextChangeTrackerQueryTrackingBehavior));
            }
            if (changeTrackerContextChangeTrackerDeleteOrphansTiming != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.DeleteOrphansTiming", changeTrackerContextChangeTrackerDeleteOrphansTiming));
            }
            if (changeTrackerContextChangeTrackerCascadeDeleteTiming != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.CascadeDeleteTiming", changeTrackerContextChangeTrackerCascadeDeleteTiming));
            }
            if (changeTrackerContextChangeTrackerContext != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.Context", changeTrackerContextChangeTrackerContext));
            }
            if (changeTrackerContextChangeTrackerDebugViewLongView != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.DebugView.LongView", changeTrackerContextChangeTrackerDebugViewLongView));
            }
            if (changeTrackerContextChangeTrackerDebugViewShortView != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.DebugView.ShortView", changeTrackerContextChangeTrackerDebugViewShortView));
            }
            if (changeTrackerContextModel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.Model", changeTrackerContextModel));
            }
            if (changeTrackerContextContextIdInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ContextId.InstanceId", changeTrackerContextContextIdInstanceId));
            }
            if (changeTrackerContextContextIdLease != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ContextId.Lease", changeTrackerContextContextIdLease));
            }
            if (changeTrackerDebugViewLongView != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.DebugView.LongView", changeTrackerDebugViewLongView));
            }
            if (changeTrackerDebugViewShortView != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.DebugView.ShortView", changeTrackerDebugViewShortView));
            }
            if (model != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Model", model));
            }
            if (contextIdInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ContextId.InstanceId", contextIdInstanceId));
            }
            if (contextIdLease != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ContextId.Lease", contextIdLease));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/Sign/affiliatedata", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSignAffiliatedataPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoCurrencies"> (optional)</param>
        /// <param name="orders"> (optional)</param>
        /// <param name="depositAddresses"> (optional)</param>
        /// <param name="userBalances"> (optional)</param>
        /// <param name="markets"> (optional)</param>
        /// <param name="tradingPairs"> (optional)</param>
        /// <param name="transactions"> (optional)</param>
        /// <param name="withdrawRequests"> (optional)</param>
        /// <param name="manualWithdrawRequests"> (optional)</param>
        /// <param name="trades"> (optional)</param>
        /// <param name="quotes"> (optional)</param>
        /// <param name="smsVerificationMessages"> (optional)</param>
        /// <param name="tradingAmounts"> (optional)</param>
        /// <param name="rippleDestinationTags"> (optional)</param>
        /// <param name="bitcoinBasedCurrencies"> (optional)</param>
        /// <param name="eRC20Tokens"> (optional)</param>
        /// <param name="balanceActions"> (optional)</param>
        /// <param name="keysValues"> (optional)</param>
        /// <param name="applicationTokenAccesses"> (optional)</param>
        /// <param name="applicationQrCommands"> (optional)</param>
        /// <param name="pushTokens"> (optional)</param>
        /// <param name="healthChecks"> (optional)</param>
        /// <param name="userRoles"> (optional)</param>
        /// <param name="roles"> (optional)</param>
        /// <param name="roleClaims"> (optional)</param>
        /// <param name="users"> (optional)</param>
        /// <param name="userClaims"> (optional)</param>
        /// <param name="userLogins"> (optional)</param>
        /// <param name="userTokens"> (optional)</param>
        /// <param name="databaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="databaseCurrentTransactionSupportsSavepoints"> (optional)</param>
        /// <param name="databaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="databaseProviderName"> (optional)</param>
        /// <param name="changeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseCurrentTransactionSupportsSavepoints"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseProviderName"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerContext"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDebugViewLongView"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDebugViewShortView"> (optional)</param>
        /// <param name="changeTrackerContextModel"> (optional)</param>
        /// <param name="changeTrackerContextContextIdInstanceId"> (optional)</param>
        /// <param name="changeTrackerContextContextIdLease"> (optional)</param>
        /// <param name="changeTrackerDebugViewLongView"> (optional)</param>
        /// <param name="changeTrackerDebugViewShortView"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <param name="contextIdInstanceId"> (optional)</param>
        /// <param name="contextIdLease"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiSignAffiliatedataPostAsync(List<CryptoCurrency> cryptoCurrencies = default(List<CryptoCurrency>), List<Order> orders = default(List<Order>), List<DepositAddress> depositAddresses = default(List<DepositAddress>), List<Balance> userBalances = default(List<Balance>), List<Market> markets = default(List<Market>), List<TradingPair> tradingPairs = default(List<TradingPair>), List<Transaction> transactions = default(List<Transaction>), List<WithdrawRequest> withdrawRequests = default(List<WithdrawRequest>), List<ManualWithdrawRequest> manualWithdrawRequests = default(List<ManualWithdrawRequest>), List<Trade> trades = default(List<Trade>), List<Quote> quotes = default(List<Quote>), List<SmsVerificationMessage> smsVerificationMessages = default(List<SmsVerificationMessage>), List<TradingAmount> tradingAmounts = default(List<TradingAmount>), List<RippleDestinationTag> rippleDestinationTags = default(List<RippleDestinationTag>), List<BitcoinBasedCurrency> bitcoinBasedCurrencies = default(List<BitcoinBasedCurrency>), List<ERC20Token> eRC20Tokens = default(List<ERC20Token>), List<BalanceAction> balanceActions = default(List<BalanceAction>), List<KeyValue> keysValues = default(List<KeyValue>), List<IApplicationTokenAccess> applicationTokenAccesses = default(List<IApplicationTokenAccess>), List<IApplicationQrCommand> applicationQrCommands = default(List<IApplicationQrCommand>), List<PushToken> pushTokens = default(List<PushToken>), List<HealthCheck> healthChecks = default(List<HealthCheck>), List<StringIdentityUserRole> userRoles = default(List<StringIdentityUserRole>), List<IdentityRole> roles = default(List<IdentityRole>), List<StringIdentityRoleClaim> roleClaims = default(List<StringIdentityRoleClaim>), List<ApplicationUser> users = default(List<ApplicationUser>), List<StringIdentityUserClaim> userClaims = default(List<StringIdentityUserClaim>), List<StringIdentityUserLogin> userLogins = default(List<StringIdentityUserLogin>), List<StringIdentityUserToken> userTokens = default(List<StringIdentityUserToken>), Guid? databaseCurrentTransactionTransactionId = default(Guid?), bool? databaseCurrentTransactionSupportsSavepoints = default(bool?), bool? databaseAutoTransactionsEnabled = default(bool?), string databaseProviderName = default(string), bool? changeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerCascadeDeleteTiming = default(CascadeTiming?), Guid? changeTrackerContextDatabaseCurrentTransactionTransactionId = default(Guid?), bool? changeTrackerContextDatabaseCurrentTransactionSupportsSavepoints = default(bool?), bool? changeTrackerContextDatabaseAutoTransactionsEnabled = default(bool?), string changeTrackerContextDatabaseProviderName = default(string), bool? changeTrackerContextChangeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerContextChangeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerContextChangeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerContextChangeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerContextChangeTrackerCascadeDeleteTiming = default(CascadeTiming?), DbContext changeTrackerContextChangeTrackerContext = default(DbContext), string changeTrackerContextChangeTrackerDebugViewLongView = default(string), string changeTrackerContextChangeTrackerDebugViewShortView = default(string), Object changeTrackerContextModel = default(Object), Guid? changeTrackerContextContextIdInstanceId = default(Guid?), int? changeTrackerContextContextIdLease = default(int?), string changeTrackerDebugViewLongView = default(string), string changeTrackerDebugViewShortView = default(string), Object model = default(Object), Guid? contextIdInstanceId = default(Guid?), int? contextIdLease = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiSignAffiliatedataPostWithHttpInfoAsync(cryptoCurrencies, orders, depositAddresses, userBalances, markets, tradingPairs, transactions, withdrawRequests, manualWithdrawRequests, trades, quotes, smsVerificationMessages, tradingAmounts, rippleDestinationTags, bitcoinBasedCurrencies, eRC20Tokens, balanceActions, keysValues, applicationTokenAccesses, applicationQrCommands, pushTokens, healthChecks, userRoles, roles, roleClaims, users, userClaims, userLogins, userTokens, databaseCurrentTransactionTransactionId, databaseCurrentTransactionSupportsSavepoints, databaseAutoTransactionsEnabled, databaseProviderName, changeTrackerAutoDetectChangesEnabled, changeTrackerLazyLoadingEnabled, changeTrackerQueryTrackingBehavior, changeTrackerDeleteOrphansTiming, changeTrackerCascadeDeleteTiming, changeTrackerContextDatabaseCurrentTransactionTransactionId, changeTrackerContextDatabaseCurrentTransactionSupportsSavepoints, changeTrackerContextDatabaseAutoTransactionsEnabled, changeTrackerContextDatabaseProviderName, changeTrackerContextChangeTrackerAutoDetectChangesEnabled, changeTrackerContextChangeTrackerLazyLoadingEnabled, changeTrackerContextChangeTrackerQueryTrackingBehavior, changeTrackerContextChangeTrackerDeleteOrphansTiming, changeTrackerContextChangeTrackerCascadeDeleteTiming, changeTrackerContextChangeTrackerContext, changeTrackerContextChangeTrackerDebugViewLongView, changeTrackerContextChangeTrackerDebugViewShortView, changeTrackerContextModel, changeTrackerContextContextIdInstanceId, changeTrackerContextContextIdLease, changeTrackerDebugViewLongView, changeTrackerDebugViewShortView, model, contextIdInstanceId, contextIdLease, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoCurrencies"> (optional)</param>
        /// <param name="orders"> (optional)</param>
        /// <param name="depositAddresses"> (optional)</param>
        /// <param name="userBalances"> (optional)</param>
        /// <param name="markets"> (optional)</param>
        /// <param name="tradingPairs"> (optional)</param>
        /// <param name="transactions"> (optional)</param>
        /// <param name="withdrawRequests"> (optional)</param>
        /// <param name="manualWithdrawRequests"> (optional)</param>
        /// <param name="trades"> (optional)</param>
        /// <param name="quotes"> (optional)</param>
        /// <param name="smsVerificationMessages"> (optional)</param>
        /// <param name="tradingAmounts"> (optional)</param>
        /// <param name="rippleDestinationTags"> (optional)</param>
        /// <param name="bitcoinBasedCurrencies"> (optional)</param>
        /// <param name="eRC20Tokens"> (optional)</param>
        /// <param name="balanceActions"> (optional)</param>
        /// <param name="keysValues"> (optional)</param>
        /// <param name="applicationTokenAccesses"> (optional)</param>
        /// <param name="applicationQrCommands"> (optional)</param>
        /// <param name="pushTokens"> (optional)</param>
        /// <param name="healthChecks"> (optional)</param>
        /// <param name="userRoles"> (optional)</param>
        /// <param name="roles"> (optional)</param>
        /// <param name="roleClaims"> (optional)</param>
        /// <param name="users"> (optional)</param>
        /// <param name="userClaims"> (optional)</param>
        /// <param name="userLogins"> (optional)</param>
        /// <param name="userTokens"> (optional)</param>
        /// <param name="databaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="databaseCurrentTransactionSupportsSavepoints"> (optional)</param>
        /// <param name="databaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="databaseProviderName"> (optional)</param>
        /// <param name="changeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseCurrentTransactionSupportsSavepoints"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseProviderName"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerContext"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDebugViewLongView"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDebugViewShortView"> (optional)</param>
        /// <param name="changeTrackerContextModel"> (optional)</param>
        /// <param name="changeTrackerContextContextIdInstanceId"> (optional)</param>
        /// <param name="changeTrackerContextContextIdLease"> (optional)</param>
        /// <param name="changeTrackerDebugViewLongView"> (optional)</param>
        /// <param name="changeTrackerDebugViewShortView"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <param name="contextIdInstanceId"> (optional)</param>
        /// <param name="contextIdLease"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> ApiSignAffiliatedataPostWithHttpInfoAsync(List<CryptoCurrency> cryptoCurrencies = default(List<CryptoCurrency>), List<Order> orders = default(List<Order>), List<DepositAddress> depositAddresses = default(List<DepositAddress>), List<Balance> userBalances = default(List<Balance>), List<Market> markets = default(List<Market>), List<TradingPair> tradingPairs = default(List<TradingPair>), List<Transaction> transactions = default(List<Transaction>), List<WithdrawRequest> withdrawRequests = default(List<WithdrawRequest>), List<ManualWithdrawRequest> manualWithdrawRequests = default(List<ManualWithdrawRequest>), List<Trade> trades = default(List<Trade>), List<Quote> quotes = default(List<Quote>), List<SmsVerificationMessage> smsVerificationMessages = default(List<SmsVerificationMessage>), List<TradingAmount> tradingAmounts = default(List<TradingAmount>), List<RippleDestinationTag> rippleDestinationTags = default(List<RippleDestinationTag>), List<BitcoinBasedCurrency> bitcoinBasedCurrencies = default(List<BitcoinBasedCurrency>), List<ERC20Token> eRC20Tokens = default(List<ERC20Token>), List<BalanceAction> balanceActions = default(List<BalanceAction>), List<KeyValue> keysValues = default(List<KeyValue>), List<IApplicationTokenAccess> applicationTokenAccesses = default(List<IApplicationTokenAccess>), List<IApplicationQrCommand> applicationQrCommands = default(List<IApplicationQrCommand>), List<PushToken> pushTokens = default(List<PushToken>), List<HealthCheck> healthChecks = default(List<HealthCheck>), List<StringIdentityUserRole> userRoles = default(List<StringIdentityUserRole>), List<IdentityRole> roles = default(List<IdentityRole>), List<StringIdentityRoleClaim> roleClaims = default(List<StringIdentityRoleClaim>), List<ApplicationUser> users = default(List<ApplicationUser>), List<StringIdentityUserClaim> userClaims = default(List<StringIdentityUserClaim>), List<StringIdentityUserLogin> userLogins = default(List<StringIdentityUserLogin>), List<StringIdentityUserToken> userTokens = default(List<StringIdentityUserToken>), Guid? databaseCurrentTransactionTransactionId = default(Guid?), bool? databaseCurrentTransactionSupportsSavepoints = default(bool?), bool? databaseAutoTransactionsEnabled = default(bool?), string databaseProviderName = default(string), bool? changeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerCascadeDeleteTiming = default(CascadeTiming?), Guid? changeTrackerContextDatabaseCurrentTransactionTransactionId = default(Guid?), bool? changeTrackerContextDatabaseCurrentTransactionSupportsSavepoints = default(bool?), bool? changeTrackerContextDatabaseAutoTransactionsEnabled = default(bool?), string changeTrackerContextDatabaseProviderName = default(string), bool? changeTrackerContextChangeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerContextChangeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerContextChangeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerContextChangeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerContextChangeTrackerCascadeDeleteTiming = default(CascadeTiming?), DbContext changeTrackerContextChangeTrackerContext = default(DbContext), string changeTrackerContextChangeTrackerDebugViewLongView = default(string), string changeTrackerContextChangeTrackerDebugViewShortView = default(string), Object changeTrackerContextModel = default(Object), Guid? changeTrackerContextContextIdInstanceId = default(Guid?), int? changeTrackerContextContextIdLease = default(int?), string changeTrackerDebugViewLongView = default(string), string changeTrackerDebugViewShortView = default(string), Object model = default(Object), Guid? contextIdInstanceId = default(Guid?), int? contextIdLease = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cryptoCurrencies != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "CryptoCurrencies", cryptoCurrencies));
            }
            if (orders != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Orders", orders));
            }
            if (depositAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "DepositAddresses", depositAddresses));
            }
            if (userBalances != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "UserBalances", userBalances));
            }
            if (markets != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Markets", markets));
            }
            if (tradingPairs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "TradingPairs", tradingPairs));
            }
            if (transactions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Transactions", transactions));
            }
            if (withdrawRequests != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "WithdrawRequests", withdrawRequests));
            }
            if (manualWithdrawRequests != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "ManualWithdrawRequests", manualWithdrawRequests));
            }
            if (trades != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Trades", trades));
            }
            if (quotes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Quotes", quotes));
            }
            if (smsVerificationMessages != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "SmsVerificationMessages", smsVerificationMessages));
            }
            if (tradingAmounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "TradingAmounts", tradingAmounts));
            }
            if (rippleDestinationTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "RippleDestinationTags", rippleDestinationTags));
            }
            if (bitcoinBasedCurrencies != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "BitcoinBasedCurrencies", bitcoinBasedCurrencies));
            }
            if (eRC20Tokens != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "ERC20Tokens", eRC20Tokens));
            }
            if (balanceActions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "BalanceActions", balanceActions));
            }
            if (keysValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "KeysValues", keysValues));
            }
            if (applicationTokenAccesses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "ApplicationTokenAccesses", applicationTokenAccesses));
            }
            if (applicationQrCommands != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "ApplicationQrCommands", applicationQrCommands));
            }
            if (pushTokens != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "PushTokens", pushTokens));
            }
            if (healthChecks != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "HealthChecks", healthChecks));
            }
            if (userRoles != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "UserRoles", userRoles));
            }
            if (roles != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Roles", roles));
            }
            if (roleClaims != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "RoleClaims", roleClaims));
            }
            if (users != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Users", users));
            }
            if (userClaims != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "UserClaims", userClaims));
            }
            if (userLogins != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "UserLogins", userLogins));
            }
            if (userTokens != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "UserTokens", userTokens));
            }
            if (databaseCurrentTransactionTransactionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Database.CurrentTransaction.TransactionId", databaseCurrentTransactionTransactionId));
            }
            if (databaseCurrentTransactionSupportsSavepoints != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Database.CurrentTransaction.SupportsSavepoints", databaseCurrentTransactionSupportsSavepoints));
            }
            if (databaseAutoTransactionsEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Database.AutoTransactionsEnabled", databaseAutoTransactionsEnabled));
            }
            if (databaseProviderName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Database.ProviderName", databaseProviderName));
            }
            if (changeTrackerAutoDetectChangesEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.AutoDetectChangesEnabled", changeTrackerAutoDetectChangesEnabled));
            }
            if (changeTrackerLazyLoadingEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.LazyLoadingEnabled", changeTrackerLazyLoadingEnabled));
            }
            if (changeTrackerQueryTrackingBehavior != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.QueryTrackingBehavior", changeTrackerQueryTrackingBehavior));
            }
            if (changeTrackerDeleteOrphansTiming != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.DeleteOrphansTiming", changeTrackerDeleteOrphansTiming));
            }
            if (changeTrackerCascadeDeleteTiming != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.CascadeDeleteTiming", changeTrackerCascadeDeleteTiming));
            }
            if (changeTrackerContextDatabaseCurrentTransactionTransactionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.Database.CurrentTransaction.TransactionId", changeTrackerContextDatabaseCurrentTransactionTransactionId));
            }
            if (changeTrackerContextDatabaseCurrentTransactionSupportsSavepoints != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.Database.CurrentTransaction.SupportsSavepoints", changeTrackerContextDatabaseCurrentTransactionSupportsSavepoints));
            }
            if (changeTrackerContextDatabaseAutoTransactionsEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.Database.AutoTransactionsEnabled", changeTrackerContextDatabaseAutoTransactionsEnabled));
            }
            if (changeTrackerContextDatabaseProviderName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.Database.ProviderName", changeTrackerContextDatabaseProviderName));
            }
            if (changeTrackerContextChangeTrackerAutoDetectChangesEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.AutoDetectChangesEnabled", changeTrackerContextChangeTrackerAutoDetectChangesEnabled));
            }
            if (changeTrackerContextChangeTrackerLazyLoadingEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.LazyLoadingEnabled", changeTrackerContextChangeTrackerLazyLoadingEnabled));
            }
            if (changeTrackerContextChangeTrackerQueryTrackingBehavior != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.QueryTrackingBehavior", changeTrackerContextChangeTrackerQueryTrackingBehavior));
            }
            if (changeTrackerContextChangeTrackerDeleteOrphansTiming != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.DeleteOrphansTiming", changeTrackerContextChangeTrackerDeleteOrphansTiming));
            }
            if (changeTrackerContextChangeTrackerCascadeDeleteTiming != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.CascadeDeleteTiming", changeTrackerContextChangeTrackerCascadeDeleteTiming));
            }
            if (changeTrackerContextChangeTrackerContext != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.Context", changeTrackerContextChangeTrackerContext));
            }
            if (changeTrackerContextChangeTrackerDebugViewLongView != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.DebugView.LongView", changeTrackerContextChangeTrackerDebugViewLongView));
            }
            if (changeTrackerContextChangeTrackerDebugViewShortView != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.DebugView.ShortView", changeTrackerContextChangeTrackerDebugViewShortView));
            }
            if (changeTrackerContextModel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.Model", changeTrackerContextModel));
            }
            if (changeTrackerContextContextIdInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ContextId.InstanceId", changeTrackerContextContextIdInstanceId));
            }
            if (changeTrackerContextContextIdLease != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ContextId.Lease", changeTrackerContextContextIdLease));
            }
            if (changeTrackerDebugViewLongView != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.DebugView.LongView", changeTrackerDebugViewLongView));
            }
            if (changeTrackerDebugViewShortView != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.DebugView.ShortView", changeTrackerDebugViewShortView));
            }
            if (model != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Model", model));
            }
            if (contextIdInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ContextId.InstanceId", contextIdInstanceId));
            }
            if (contextIdLease != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ContextId.Lease", contextIdLease));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/Sign/affiliatedata", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSignAffiliatedataPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void ApiSignCheckIsMobileOnlinePost()
        {
            ApiSignCheckIsMobileOnlinePostWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> ApiSignCheckIsMobileOnlinePostWithHttpInfo()
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/Sign/CheckIsMobileOnline", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSignCheckIsMobileOnlinePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiSignCheckIsMobileOnlinePostAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiSignCheckIsMobileOnlinePostWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> ApiSignCheckIsMobileOnlinePostWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/Sign/CheckIsMobileOnline", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSignCheckIsMobileOnlinePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postConfirmRequest"> (optional)</param>
        /// <returns>EmailConfirmationResult</returns>
        public EmailConfirmationResult ApiSignConfirmemailPost(PostConfirmRequest postConfirmRequest = default(PostConfirmRequest))
        {
            Org.OpenAPITools.Client.ApiResponse<EmailConfirmationResult> localVarResponse = ApiSignConfirmemailPostWithHttpInfo(postConfirmRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postConfirmRequest"> (optional)</param>
        /// <returns>ApiResponse of EmailConfirmationResult</returns>
        public Org.OpenAPITools.Client.ApiResponse<EmailConfirmationResult> ApiSignConfirmemailPostWithHttpInfo(PostConfirmRequest postConfirmRequest = default(PostConfirmRequest))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = postConfirmRequest;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EmailConfirmationResult>("/api/Sign/confirmemail", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSignConfirmemailPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postConfirmRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailConfirmationResult</returns>
        public async System.Threading.Tasks.Task<EmailConfirmationResult> ApiSignConfirmemailPostAsync(PostConfirmRequest postConfirmRequest = default(PostConfirmRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<EmailConfirmationResult> localVarResponse = await ApiSignConfirmemailPostWithHttpInfoAsync(postConfirmRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postConfirmRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailConfirmationResult)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<EmailConfirmationResult>> ApiSignConfirmemailPostWithHttpInfoAsync(PostConfirmRequest postConfirmRequest = default(PostConfirmRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = postConfirmRequest;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<EmailConfirmationResult>("/api/Sign/confirmemail", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSignConfirmemailPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceName"> (optional)</param>
        /// <returns>bool</returns>
        public bool ApiSignEnable2faPost(string deviceName = default(string))
        {
            Org.OpenAPITools.Client.ApiResponse<bool> localVarResponse = ApiSignEnable2faPostWithHttpInfo(deviceName);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceName"> (optional)</param>
        /// <returns>ApiResponse of bool</returns>
        public Org.OpenAPITools.Client.ApiResponse<bool> ApiSignEnable2faPostWithHttpInfo(string deviceName = default(string))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (deviceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "deviceName", deviceName));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<bool>("/api/Sign/enable2fa", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSignEnable2faPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> ApiSignEnable2faPostAsync(string deviceName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<bool> localVarResponse = await ApiSignEnable2faPostWithHttpInfoAsync(deviceName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<bool>> ApiSignEnable2faPostWithHttpInfoAsync(string deviceName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (deviceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "deviceName", deviceName));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<bool>("/api/Sign/enable2fa", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSignEnable2faPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceName"> (optional)</param>
        /// <param name="ip"> (optional)</param>
        /// <returns>List&lt;MobileConfirmationRequest&gt;</returns>
        public List<MobileConfirmationRequest> ApiSignGetRequestsGet(string deviceName = default(string), string ip = default(string))
        {
            Org.OpenAPITools.Client.ApiResponse<List<MobileConfirmationRequest>> localVarResponse = ApiSignGetRequestsGetWithHttpInfo(deviceName, ip);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceName"> (optional)</param>
        /// <param name="ip"> (optional)</param>
        /// <returns>ApiResponse of List&lt;MobileConfirmationRequest&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<MobileConfirmationRequest>> ApiSignGetRequestsGetWithHttpInfo(string deviceName = default(string), string ip = default(string))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (deviceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "deviceName", deviceName));
            }
            if (ip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ip", ip));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<MobileConfirmationRequest>>("/api/Sign/getRequests", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSignGetRequestsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceName"> (optional)</param>
        /// <param name="ip"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MobileConfirmationRequest&gt;</returns>
        public async System.Threading.Tasks.Task<List<MobileConfirmationRequest>> ApiSignGetRequestsGetAsync(string deviceName = default(string), string ip = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<MobileConfirmationRequest>> localVarResponse = await ApiSignGetRequestsGetWithHttpInfoAsync(deviceName, ip, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceName"> (optional)</param>
        /// <param name="ip"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MobileConfirmationRequest&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<MobileConfirmationRequest>>> ApiSignGetRequestsGetWithHttpInfoAsync(string deviceName = default(string), string ip = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (deviceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "deviceName", deviceName));
            }
            if (ip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ip", ip));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<MobileConfirmationRequest>>("/api/Sign/getRequests", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSignGetRequestsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postGetReferrerEmailRequest"> (optional)</param>
        /// <returns>PostGetReferrerEmailResponse</returns>
        public PostGetReferrerEmailResponse ApiSignGetreferreremailPost(PostGetReferrerEmailRequest postGetReferrerEmailRequest = default(PostGetReferrerEmailRequest))
        {
            Org.OpenAPITools.Client.ApiResponse<PostGetReferrerEmailResponse> localVarResponse = ApiSignGetreferreremailPostWithHttpInfo(postGetReferrerEmailRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postGetReferrerEmailRequest"> (optional)</param>
        /// <returns>ApiResponse of PostGetReferrerEmailResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<PostGetReferrerEmailResponse> ApiSignGetreferreremailPostWithHttpInfo(PostGetReferrerEmailRequest postGetReferrerEmailRequest = default(PostGetReferrerEmailRequest))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = postGetReferrerEmailRequest;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PostGetReferrerEmailResponse>("/api/Sign/getreferreremail", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSignGetreferreremailPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postGetReferrerEmailRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostGetReferrerEmailResponse</returns>
        public async System.Threading.Tasks.Task<PostGetReferrerEmailResponse> ApiSignGetreferreremailPostAsync(PostGetReferrerEmailRequest postGetReferrerEmailRequest = default(PostGetReferrerEmailRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PostGetReferrerEmailResponse> localVarResponse = await ApiSignGetreferreremailPostWithHttpInfoAsync(postGetReferrerEmailRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postGetReferrerEmailRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostGetReferrerEmailResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PostGetReferrerEmailResponse>> ApiSignGetreferreremailPostWithHttpInfoAsync(PostGetReferrerEmailRequest postGetReferrerEmailRequest = default(PostGetReferrerEmailRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = postGetReferrerEmailRequest;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PostGetReferrerEmailResponse>("/api/Sign/getreferreremail", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSignGetreferreremailPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestType"> (optional)</param>
        /// <returns></returns>
        public void ApiSignMobileConfirmationRequestPost(RequestType? requestType = default(RequestType?))
        {
            ApiSignMobileConfirmationRequestPostWithHttpInfo(requestType);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestType"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> ApiSignMobileConfirmationRequestPostWithHttpInfo(RequestType? requestType = default(RequestType?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (requestType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "requestType", requestType));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/Sign/MobileConfirmationRequest", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSignMobileConfirmationRequestPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestType"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiSignMobileConfirmationRequestPostAsync(RequestType? requestType = default(RequestType?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiSignMobileConfirmationRequestPostWithHttpInfoAsync(requestType, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestType"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> ApiSignMobileConfirmationRequestPostWithHttpInfoAsync(RequestType? requestType = default(RequestType?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (requestType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "requestType", requestType));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/Sign/MobileConfirmationRequest", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSignMobileConfirmationRequestPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postResetPasswordRequest"> (optional)</param>
        /// <returns>bool</returns>
        public bool ApiSignResetpasswordPost(PostResetPasswordRequest postResetPasswordRequest = default(PostResetPasswordRequest))
        {
            Org.OpenAPITools.Client.ApiResponse<bool> localVarResponse = ApiSignResetpasswordPostWithHttpInfo(postResetPasswordRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postResetPasswordRequest"> (optional)</param>
        /// <returns>ApiResponse of bool</returns>
        public Org.OpenAPITools.Client.ApiResponse<bool> ApiSignResetpasswordPostWithHttpInfo(PostResetPasswordRequest postResetPasswordRequest = default(PostResetPasswordRequest))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = postResetPasswordRequest;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<bool>("/api/Sign/resetpassword", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSignResetpasswordPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postResetPasswordRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> ApiSignResetpasswordPostAsync(PostResetPasswordRequest postResetPasswordRequest = default(PostResetPasswordRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<bool> localVarResponse = await ApiSignResetpasswordPostWithHttpInfoAsync(postResetPasswordRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postResetPasswordRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<bool>> ApiSignResetpasswordPostWithHttpInfoAsync(PostResetPasswordRequest postResetPasswordRequest = default(PostResetPasswordRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = postResetPasswordRequest;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<bool>("/api/Sign/resetpassword", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSignResetpasswordPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postForgotPasswordRequest"> (optional)</param>
        /// <returns>bool</returns>
        public bool ApiSignRestorepasswordPost(PostForgotPasswordRequest postForgotPasswordRequest = default(PostForgotPasswordRequest))
        {
            Org.OpenAPITools.Client.ApiResponse<bool> localVarResponse = ApiSignRestorepasswordPostWithHttpInfo(postForgotPasswordRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postForgotPasswordRequest"> (optional)</param>
        /// <returns>ApiResponse of bool</returns>
        public Org.OpenAPITools.Client.ApiResponse<bool> ApiSignRestorepasswordPostWithHttpInfo(PostForgotPasswordRequest postForgotPasswordRequest = default(PostForgotPasswordRequest))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = postForgotPasswordRequest;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<bool>("/api/Sign/restorepassword", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSignRestorepasswordPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postForgotPasswordRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> ApiSignRestorepasswordPostAsync(PostForgotPasswordRequest postForgotPasswordRequest = default(PostForgotPasswordRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<bool> localVarResponse = await ApiSignRestorepasswordPostWithHttpInfoAsync(postForgotPasswordRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postForgotPasswordRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<bool>> ApiSignRestorepasswordPostWithHttpInfoAsync(PostForgotPasswordRequest postForgotPasswordRequest = default(PostForgotPasswordRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = postForgotPasswordRequest;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<bool>("/api/Sign/restorepassword", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSignRestorepasswordPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSetAffiliateRequest"> (optional)</param>
        /// <returns></returns>
        public void ApiSignSetAffiliatePost(PostSetAffiliateRequest postSetAffiliateRequest = default(PostSetAffiliateRequest))
        {
            ApiSignSetAffiliatePostWithHttpInfo(postSetAffiliateRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSetAffiliateRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> ApiSignSetAffiliatePostWithHttpInfo(PostSetAffiliateRequest postSetAffiliateRequest = default(PostSetAffiliateRequest))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = postSetAffiliateRequest;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/Sign/setAffiliate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSignSetAffiliatePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSetAffiliateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiSignSetAffiliatePostAsync(PostSetAffiliateRequest postSetAffiliateRequest = default(PostSetAffiliateRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiSignSetAffiliatePostWithHttpInfoAsync(postSetAffiliateRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSetAffiliateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> ApiSignSetAffiliatePostWithHttpInfoAsync(PostSetAffiliateRequest postSetAffiliateRequest = default(PostSetAffiliateRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = postSetAffiliateRequest;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/Sign/setAffiliate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSignSetAffiliatePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSignInRequest"> (optional)</param>
        /// <returns>PostSignInResponse</returns>
        public PostSignInResponse ApiSignSigninPost(PostSignInRequest postSignInRequest = default(PostSignInRequest))
        {
            Org.OpenAPITools.Client.ApiResponse<PostSignInResponse> localVarResponse = ApiSignSigninPostWithHttpInfo(postSignInRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSignInRequest"> (optional)</param>
        /// <returns>ApiResponse of PostSignInResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<PostSignInResponse> ApiSignSigninPostWithHttpInfo(PostSignInRequest postSignInRequest = default(PostSignInRequest))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = postSignInRequest;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PostSignInResponse>("/api/Sign/signin", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSignSigninPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSignInRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostSignInResponse</returns>
        public async System.Threading.Tasks.Task<PostSignInResponse> ApiSignSigninPostAsync(PostSignInRequest postSignInRequest = default(PostSignInRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PostSignInResponse> localVarResponse = await ApiSignSigninPostWithHttpInfoAsync(postSignInRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSignInRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostSignInResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PostSignInResponse>> ApiSignSigninPostWithHttpInfoAsync(PostSignInRequest postSignInRequest = default(PostSignInRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = postSignInRequest;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PostSignInResponse>("/api/Sign/signin", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSignSigninPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSignUpRequest"> (optional)</param>
        /// <returns>PostSignUpResponse</returns>
        public PostSignUpResponse ApiSignSignupPost(PostSignUpRequest postSignUpRequest = default(PostSignUpRequest))
        {
            Org.OpenAPITools.Client.ApiResponse<PostSignUpResponse> localVarResponse = ApiSignSignupPostWithHttpInfo(postSignUpRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSignUpRequest"> (optional)</param>
        /// <returns>ApiResponse of PostSignUpResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<PostSignUpResponse> ApiSignSignupPostWithHttpInfo(PostSignUpRequest postSignUpRequest = default(PostSignUpRequest))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = postSignUpRequest;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PostSignUpResponse>("/api/Sign/signup", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSignSignupPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSignUpRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostSignUpResponse</returns>
        public async System.Threading.Tasks.Task<PostSignUpResponse> ApiSignSignupPostAsync(PostSignUpRequest postSignUpRequest = default(PostSignUpRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PostSignUpResponse> localVarResponse = await ApiSignSignupPostWithHttpInfoAsync(postSignUpRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSignUpRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostSignUpResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PostSignUpResponse>> ApiSignSignupPostWithHttpInfoAsync(PostSignUpRequest postSignUpRequest = default(PostSignUpRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = postSignUpRequest;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PostSignUpResponse>("/api/Sign/signup", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSignSignupPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
