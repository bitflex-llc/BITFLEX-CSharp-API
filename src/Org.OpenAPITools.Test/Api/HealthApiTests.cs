/*
 * BITFLEX Public API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing HealthApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class HealthApiTests : IDisposable
    {
        private HealthApi instance;

        public HealthApiTests()
        {
            instance = new HealthApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of HealthApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' HealthApi
            //Assert.IsType<HealthApi>(instance);
        }

        /// <summary>
        /// Test ApiHealthTickGet
        /// </summary>
        [Fact]
        public void ApiHealthTickGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ApiHealthTickGet();
            //Assert.IsType<GetTickeAsyncResponse>(response);
        }

        /// <summary>
        /// Test ApiHealthTockGet
        /// </summary>
        [Fact]
        public void ApiHealthTockGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ServerLocation? location = null;
            //int? elapsed = null;
            //long? timeStamp = null;
            //instance.ApiHealthTockGet(location, elapsed, timeStamp);
        }
    }
}
